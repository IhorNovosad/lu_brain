/**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/

 
///////////////////////////////////////////////////////////////////////////////
// Inits, create and destroy

	lu_flags mem_type_dynamic(Mem self)
	{
		return MEM_DYNAMIC;
	}

	lu_p_byte mem_alloc_dynamic(Mem self, lu_size size)
	{
		return (lu_p_byte) malloc(size);
	}

	lu_p_byte mem_realloc_dynamic(Mem self, lu_p_byte p, lu_size size_in_bytes)
	{
		return (lu_p_byte) realloc(p, size_in_bytes);
	}

	void mem_free_dynamic(Mem self, lu_p_byte p)
	{
		free((lu_p_void) p);
	}

	static void mem_destroy_dynamic(Mem self)
	{
		free((lu_p_void) self);
	}

	Mem mem_create()
	{
		Mem self 		= malloc(sizeof(struct mem));

		self->type 		= mem_type_dynamic;
		self->alloc 	= mem_alloc_dynamic;
		self->realloc 	= mem_realloc_dynamic;
		self->free 		= mem_free_dynamic;
		self->destroy 	= mem_destroy_dynamic;

		return self;
	}

	void mem_destroy(Mem self)
	{
		self->destroy(self);
	}


///////////////////////////////////////////////////////////////////////////////
// Main methods

	lu_flags mem_type_internal(Mem self)
	{
		return self->type(self);
	}

	lu_p_byte mem_alloc_internal(Mem self, lu_size size_in_bytes, const char* file, int line)
	{
		return self->alloc(self, size_in_bytes);
	}

	lu_p_byte mem_realloc_internal(Mem self, lu_p_byte p, lu_size size_in_bytes, const char* file, int line)
	{
		return self->realloc(self, p, size_in_bytes);
	}

	lu_p_byte mem_free_internal(Mem self, lu_p_byte p, const char* file, int line)
	{
		self->free(self, p);
	}