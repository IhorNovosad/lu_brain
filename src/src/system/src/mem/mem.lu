/**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/
 
///////////////////////////////////////////////////////////////////////////////
// 

	lu_flags mem_type_dynamic(Mem self)
	{
		return MEM_TYPE_DYNAMIC;
	}

	lu_p_byte mem_alloc_dynamic(Mem self, lu_size size, const char* file, int line)
	{
		return (lu_p_byte) malloc(size);
	}

	lu_p_byte mem_realloc_dynamic(Mem self, lu_p_byte p, lu_size size_in_bytes, const char* file, int line)
	{
		return (lu_p_byte) realloc(p, size_in_bytes);
	}

	void mem_free_dynamic(Mem self, lu_p_byte p, const char* file, int line)
	{
		free((lu_p_void) p);
	}

	static void mem_destroy_dynamic(Mem self, Mem parent_mem, const char* file, int line)
	{
		free((lu_p_void) self);
	}

///////////////////////////////////////////////////////////////////////////////
// Globals

	struct mem g_default_mem_instance = {
		.type 		= mem_type_dynamic,
		.alloc 		= mem_alloc_dynamic,
		.realloc 	= mem_realloc_dynamic,
		.free 		= mem_free_dynamic,
		.destroy 	= mem_destroy_dynamic
	};

	Mem g_mem_default = &g_default_mem_instance;

///////////////////////////////////////////////////////////////////////////////
// Inits, create and destroy

	void mem_init(Mem self)
	{
		self->type 		= g_default_mem_instance.type;
		self->alloc 	= g_default_mem_instance.alloc;
		self->realloc 	= g_default_mem_instance.realloc;
		self->free 		= g_default_mem_instance.free;
		self->destroy 	= g_default_mem_instance.destroy;
	}

	Mem mem_create()
	{
		Mem self 		= malloc(sizeof(struct mem));

		mem_init(self);

		return self;
	}

///////////////////////////////////////////////////////////////////////////////
// Main methods

	lu_flags mem_type_internal(Mem self)
	{
		return self->type(self);
	}

	lu_p_byte mem_alloc_internal(Mem self, lu_size size_in_bytes, const char* file, int line)
	{
		return self->alloc(self, size_in_bytes, file, line);
	}

	lu_p_byte mem_realloc_internal(Mem self, lu_p_byte p, lu_size size_in_bytes, const char* file, int line)
	{
		return self->realloc(self, p, size_in_bytes, file, line);
	}

	lu_p_byte mem_free_internal(Mem self, lu_p_byte p, const char* file, int line)
	{
		self->free(self, p, file, line);
	}

	void mem_destroy_internal(Mem self, Mem parent_mem, const char* file, int line)
	{
		self->destroy(self, parent_mem, file, line);
	}