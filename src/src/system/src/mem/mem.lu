/**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/

 
///////////////////////////////////////////////////////////////////////////////
// Inits, create and destroy


	Mem mem_create(lu_size size_in_bytes)
	{
		lu_p_void start			= malloc(size_in_bytes);

		if (start == NULL) return NULL;

		Mem self 				= (Mem) start;
		self->buff_start 		= (lu_p_byte) start;
		self->buff_end			= self->buff_start + size_in_bytes;
		self->buff_pos 			= self->buff_start + sizeof(struct mem);

		if (self->buff_pos >= self->buff_end)
		{
			mem_destroy(self);
			return NULL;
		}

		return self;
	}

	void mem_destroy(Mem self)
	{
		free((lu_p_void) self);
	}

///////////////////////////////////////////////////////////////////////////////
// Main methods

	// 
	// All allocations should be at the beginning of app existance executed 
	// in single thread. No multi-threading support is needed.
	//
	lu_p_byte mem_alloc(Mem self, lu_size size_in_bytes)
	{
		if (self->buff_pos + size_in_bytes > self->buff_end) 
			return NULL;

		lu_p_byte tmp 	= self->buff_pos;
		self->buff_pos 	+= size_in_bytes;
		return tmp;
	}