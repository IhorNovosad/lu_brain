/**
	Copyright Â© 2020 Oleh Ihorovych Novosad (Novossaad)
*/
 
///////////////////////////////////////////////////////////////////////////////
// Structs and types

///////////////////////////////////////////////////////////////////////////////
// Prototypes
 
///////////////////////////////////////////////////////////////////////////////
// Init, create and destroy

static L_Node ln_alloc_node_create(LnAlloc self, lu_p_void value)
{
	L_Node node = (L_Node) malloc(sizeof(struct l_node));

	l_node_init(node, value);

	return node;
}

static void ln_alloc_node_destroy(LnAlloc self, L_Node* node)
{
	lu_free((void**) node);
}

// static void ln_alloc_destroy(LnAlloc* self, L_Node first)
// {
// 	ln_alloc_destroy(self, first);
// }


void ln_alloc_init(LnAlloc self)
{
	self->node_create 	= ln_alloc_node_create;
	self->node_destroy 	= ln_alloc_node_destroy;
	self->destroy 		= ln_alloc_destroy;
}

LnAlloc ln_alloc_create()
{
	LnAlloc self = (LnAlloc) malloc(sizeof(struct ln_alloc));

	ln_alloc_init(self);

	return self;
}

void ln_alloc_destroy(LnAlloc* self, L_Node first)
{
	L_Node node = first;
	L_Node to_destr;
	while (node)
	{
		to_destr = node;
		node = node->next;
		(*self)->node_destroy(*self, &to_destr);
	}
	lu_free((void**) self);
}

///////////////////////////////////////////////////////////////////////////////
// Main public methods



///////////////////////////////////////////////////////////////////////////////
// Other public methods

