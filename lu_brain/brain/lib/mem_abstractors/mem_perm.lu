/**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// Mem_Perm

	// 
	// All allocations should be at the beginning of app existance executed 
	// in single thread. No multi-threading support is needed.
	//
	lu_p_byte mem_perm_alloc_internal(Mem mem, lu_size size_in_bytes, const char* func, const char* file, int line)
	{
		Mem_Perm self = (Mem_Perm) mem;


		if (self->buff_pos + size_in_bytes > self->buff_end)
		{
			char msg[256];
			sprintf(
				msg, 
				"MEM_PERM alloc %ld bytes failed. Used %ld from %ld bytes.", 
				size_in_bytes,
				self->buff_pos - self->buff_start, 
				self->size_in_bytes
			);

			lu_user_debug_internal(func, file, line, msg);
			return NULL;
		}

		lu_p_byte tmp 	= self->buff_pos;
		self->buff_pos 	+= size_in_bytes;
		return tmp;
	} 

	lu_p_byte mem_perm_realloc_internal(Mem self, lu_p_byte p, lu_size size_in_bytes, const char* func, const char* file, int line)
	{
		lu_debug_message("NOT IMPLEMENTED");
		return NULL;
	}

	void mem_perm_free_internal(Mem self, lu_p_byte p, const char* func, const char* file, int line)
	{
		lu_debug_message("NOT IMPLEMENTED");
	}

	void mem_perm_destroy_internal(Mem self, Mem parent_mem, const char* func, const char* file, int line)
	{
		mem_free(parent_mem, (lu_p_byte) self);
	}

	Mem_Table mem_table_perm_create_internal(
		Mem 		mem, 
		lu_size 	record_size_in_bytes, 
		lu_size 	table_size_in_records, 
		lu_value 	percent,
		lu_flags 	flags,
		const char* func, 
		const char* file,
		int 		line
	)
	{
		return (Mem_Table) mem_table_perm_create(
			(Mem_Perm) mem,
			record_size_in_bytes,
			table_size_in_records,
			percent,
			flags,
			func,
			file,
			line
		); 
	}

	Mem_Perm mem_perm_create(Mem parent_mem, lu_size size_in_bytes)
	{
		lu_p_void buff_start	= mem_alloc(parent_mem, size_in_bytes);

		if (buff_start == NULL) return NULL;

		Mem_Perm self 				= (Mem_Perm) buff_start;

		self->super.alloc 			= mem_perm_alloc_internal;
		self->super.realloc 		= mem_perm_realloc_internal;
		self->super.free 			= mem_perm_free_internal;
		self->super.destroy 		= mem_perm_destroy_internal;
		self->super.table_create 	= mem_table_perm_create_internal;

		self->buff_start 			= (lu_p_byte) buff_start;
		self->buff_end				= self->buff_start + size_in_bytes;
		self->buff_pos 				= self->buff_start + sizeof(struct mem_perm);
		self->size_in_bytes 		= size_in_bytes;

		if (mem_perm_is_out_of_mem(self))
		{
			Mem mem = (Mem) self;
			mem_destroy(mem, parent_mem);
			return NULL;
		}

		return self;
	}

///////////////////////////////////////////////////////////////////////////////
// Mem_Table_Perm

	void mem_table_perm_realloc_internal(
		Mem_Table self, 
		lu_size new_size_in_bytes, 
		lu_flags flags, 
		const char* func, 
		const char* file, 
		int line
	)
	{
		lu_debug_message("NOT IMPLEMENTED");
	}

	Mem_Table_Perm mem_table_perm_create(
		Mem_Perm 			brain_mem, 
		lu_size 			record_size_in_bytes, 
		lu_size 			table_size_in_records, 
		lu_value 			percent,
		lu_flags 			flags,
		const char* 		func, 
		const char* 		file,
		int 				line
	)
	{
		if (record_size_in_bytes == 0) return NULL;

		if (table_size_in_records == 0 && percent == 0) return NULL;

		if (percent > 100.0) return NULL;

		if (table_size_in_records == 0 && percent > 0)
		{
			// x * ps + x * is + sisa = a
			// x * (ps + is) = a - sisa
			// x = (a - sisa)/(ps + is)

			lu_size a = mem_perm_avail(brain_mem) * percent  / 100.0;

			lu_size fis = record_size_in_bytes;
			if (flags & MTF_FREEABLE) 
				fis += sizeof(lu_p_byte);

			table_size_in_records = (a - sizeof(struct mem_table_perm)) / fis;
		}

		lu_size full_size = sizeof(struct mem_table_perm) + record_size_in_bytes * table_size_in_records;
		
		if (flags & MTF_FREEABLE) 
			full_size += sizeof(lu_p_byte) * table_size_in_records;

		Mem mem = (Mem) brain_mem;
		lu_p_byte start = mem_alloc(mem, full_size);

		if (start == NULL) return NULL;

		Mem_Table_Perm self = (Mem_Table_Perm) start;

		// super

		self->super.realloc 				= mem_table_perm_realloc_internal;
		self->super.destroy 				= mem_table_destroy_default;
		self->super.record_alloc 			= mem_table_record_alloc_default;
		self->super.record_free 			= mem_table_record_free_default;
		self->super.size_in_bytes 			= mem_table_size_in_bytes_default;

		self->super.record_size_in_bytes 	= record_size_in_bytes;
		self->super.table_size_in_records 	= table_size_in_records;
		self->super.flags 					= flags;
		self->super.records_start 			= start + sizeof(struct mem_table_perm);
		self->super.records_pos				= self->super.records_start;
		self->super.records_end				= self->super.records_start + self->super.table_size_in_records * self->super.record_size_in_bytes;
		self->super.free_start 				= (lu_p_byte*) self->super.records_end;
		self->super.records_count 			= 0;
		self->super.free_count				= 0;
		self->super.full_size_in_bytes 		= full_size;

		// own
		self->brain_mem 				= brain_mem;

		return self;
	}