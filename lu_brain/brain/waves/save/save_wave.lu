/**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// Save_Wave_Create_Opts

	static void save_wave_create_opts_init(Save_Wave_Create_Opts self)
	{
		self->max_story_size_in_blocks = 16;
	}

///////////////////////////////////////////////////////////////////////////////
// Save_Wave

	static void save_wave_init(Save_Wave self, Story story, Save_Opts opts)
	{
		if (opts)
			self->save_opts = *opts;

		self->story = story;
	}

	static Save_Wave save_wave_create(Gate gate, Save_Wave_Create_Opts opts)
	{
		lu_assert(opts->max_story_size_in_blocks > 0);
		lu_assert(gate && gate->brain && gate->brain->mem_perm);

		Brain brain 	= gate->brain;
		Mem mem 		= brain->mem_perm;

		Save_Wave self 		= (Save_Wave) mem_alloc(mem, sizeof(struct save_wave));

		self->cont_percs 	= arr2_create(mem, arr_count(brain->recs), opts->max_story_size_in_blocks);
		
		lu_size xi, yi;
		lu_size width = arr2_width(self->cont_percs);
		lu_size height = arr2_height(self->cont_percs);
		Rec rec;
		lu_p_value block;
		for(xi = 0; xi < width; xi++)
		{
			rec = (Rec) arr_get(brain->recs, xi);
			for(yi = 0; yi < height; yi++)
			{
				block =(lu_p_value) mem_alloc(mem, rec->width * rec->height * sizeof(lu_value));
				arr2_set(self->cont_percs, xi, yi, block);
			}
		}

	
		return self;
	}

	static void save_wave_process(Save_Wave self)
	{
		// vse connetytsia po chasu
		// i sytuaciyu v odnomu rec 
		// i sytuaciyu mizh rec
		// i osoblyvo sytuaciyi v odnomu bloci

		// znachenia dlia neurons isnuyut tilky dlia potochnoyi wave
		// yaki my attachymo do neus yak componentu ES

		// if (self == NULL) {
		// 	lu_user_debug("self should not be NULL");
		// 	return;
		// }

		// Story story = self->story;

		// if (story == NULL) {
		// 	lu_user_debug("story should not be NULL");
		// 	return;
		// }

		// if (story->data_y < 1) {
		// 	lu_user_debug("story without blocks");
		// 	return;
		// }

		// arr_each_with_index_1p(story->blocks, save_wave_each_block_save, self);
	}