/**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// Save_Wave_Create_Opts

	static void save_wave_create_opts_init(Save_Wave_Create_Opts self)
	{
		self->max_story_size_in_blocks = 16;
	}

///////////////////////////////////////////////////////////////////////////////
// Save_Wave

	static void save_wave_init(Save_Wave self, Lu_Story story, Lu_Save_Opts opts)
	{
		if (opts)
			self->save_opts = *opts;

		self->story = story;
	} 

	static void save_wave_reset(Save_Wave self)
	{
		lu_user_assert_void(self, "Lu_Wave is NULL");
		lu_user_assert_void(self->super.gate, "Gate is NULL");

		Lu_Brain brain = self->super.gate->brain;

		lu_user_assert_void(brain, "Lu_Brain is NULL");
		lu_user_assert_void(arr_count(brain->recs) > 0, "Lu_Brain has no recs");

		for (lu_size rec_i = 0; rec_i < arr_count(brain->recs); rec_i++)
			self->fill_data[rec_i] = NULL;
	}

	static Save_Wave save_wave_create(Gate gate, Save_Wave_Create_Opts opts)
	{
		lu_user_assert(opts->max_story_size_in_blocks > 0, "Option max_story_size_in_blocks should be greater than 0");
		lu_user_assert(gate, "Gate is NULL");

		Lu_Brain brain = gate->brain;

		lu_user_assert(brain, "Lu_Brain is NULL");

		Mem mem = brain->mem_perm;

		lu_user_assert(mem, "Mem is NULL");

		Save_Wave self 		= (Save_Wave) mem_alloc(mem, sizeof(struct save_wave));

		wave_init(&self->super, gate);

		lu_user_assert(self, "Unable to allocate Save_Wave");

		lu_user_assert(arr_count(brain->recs) > 0, "Lu_Brain has no recs");

		self->fill_data = (lu_p_value*) mem_alloc(mem, sizeof(lu_p_value*) * arr_count(brain->recs));

		save_wave_reset(self);

		return self;
	}



	static void save_wave_process(Save_Wave self)
	{
		// vse connetytsia po chasu
		// i sytuaciyu v odnomu lu_rec 
		// i sytuaciyu mizh lu_rec
		// i osoblyvo sytuaciyi v odnomu bloci

		// znachenia dlia neurons isnuyut tilky dlia potochnoyi lu_wave
		// yaki my attachymo do neus yak componentu ES

		// if (self == NULL) {
		// 	lu_user_debug("self should not be NULL");
		// 	return;
		// }

		// Lu_Story story = self->story;

		// if (story == NULL) {
		// 	lu_user_debug("story should not be NULL");
		// 	return;
		// }

		// if (story->data_y < 1) {
		// 	lu_user_debug("story without blocks");
		// 	return;
		// }

		// arr_each_with_index_1p(story->blocks, save_wave_each_block_save, self);
	}