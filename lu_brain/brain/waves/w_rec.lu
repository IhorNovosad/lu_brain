/**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/
	static void w_rec_debug_print(W_Rec self)
	{
		lu_size x, y;
		W_Col col;

		lu_debug("\n---------------------");
		lu_debug("\ncolors: ");

		for(y = 0; y < self->colors_h; y++)
		{
			lu_debug("\n");
			for(x = 0; x < self->colors_w; x++)
			{
				col = w_rec_colors_get(self, x, y);

				if (col == NULL)
					lu_debug("NULL ");
				else if (col->type != NCT_COL)
					lu_debug("ERROR ");
				else
					lu_debug("(%d, %d) ", col->x, col->y);
			}
		}  

		lu_debug("\n");
	}

	static W_Rec w_rec_create(Mem mem, N_Rec n_rec)
	{
		lu_user_assert(mem, "Mem is NULL"); 
		lu_user_assert(n_rec, "N_Rec is NULL");

		W_Rec self = (W_Rec) mem_alloc(mem, sizeof(struct w_rec));
		lu_user_assert(self, "Cannot allocate W_Rec");

		self->component_size 	= n_rec->component_size;
		self->w_cols_w 			= n_rec->n_cols_w;
		self->w_cols_h 			= n_rec->n_cols_h;
		self->w_cols 			= (W_Col*) mem_alloc(mem, sizeof(W_Col) * self->w_cols_w * self->w_cols_h);
		lu_user_assert(self->w_cols, "Cannot allocate W_Rec w_cols");

		lu_size x, y, cx, cy;
		N_Col n_col;

		self->colors_w = n_rec->rec->width;
		self->colors_h = n_rec->rec->height;

		self->colors = (W_Col*) mem_alloc(
			mem,
			sizeof(W_Col) * self->colors_w * self->colors_h
		);

		lu_user_assert(self->colors, "Cannot allocate colors");

		for(y = 0, cy = 0; y < self->w_cols_h; y++)
			for(x = 0, cx = 0; x < self->w_cols_w; x++)
			{
				n_col = n_rec_n_cols_get(n_rec, x, y);
				if (!n_col) continue;

				W_Col col = w_col_create(mem, self, n_col);
				w_rec_w_cols_set(self, x, y, col);

				if (col && col->type == NCT_COL)
				{
					w_rec_colors_set(self, cx, cy, col);
					++cx;

					if (cx >= self->colors_w) ++cy;
				}
			}

		return self;
	}

///////////////////////////////////////////////////////////////////////////////
// 

	static void w_rec_sig_send(W_Rec self, lu_size x, lu_size y, lu_size neu_ent)
	{

	}