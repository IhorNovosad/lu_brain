/**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/
 
///////////////////////////////////////////////////////////////////////////////
// Init, create and destroy

	static void wave_init(Wave self, Gate gate)
	{
		self->gate = gate;
	}

///////////////////////////////////////////////////////////////////////////////
// API

	lu_bool lu_wave_is_working(Wave self)
	{
		return false;
	}

	lu_bool lu_wave_cancel(Wave self)
	{

	}

	lu_size lu_wave_time(Wave self)
	{

	}

	enum lu_wave_status lu_wave_status(Wave self)
	{

	}

	lu_size lu_wave_touched_count(Wave self)
	{

	}

	lu_size lu_wave_excited_count(Wave self)
	{

	}

	void wave_release(Wave self)
	{

	}

	Lu_Wave_Resp lu_wave_response(Wave self)
	{
		lu_user_assert(self, "Wave is NULL");

		Lu_Wave_Resp resp = NULL;

		wave_release(self);

		return resp;
	}

	void lu_wave_join(Wave self)
	{
		lu_user_assert_void(self, "Wave is NULL");
	}