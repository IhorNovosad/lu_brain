/**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/
 
///////////////////////////////////////////////////////////////////////////////
// Init, create and destroy

	static void wave_init(Lu_Wave self, Gate gate)
	{
		lu_user_assert_void(gate, "Gate is NULL");

		self->gate = gate;

		Lu_Brain brain = gate->brain;
		lu_user_assert_void(brain, "Brain is NULL");
		lu_user_assert_void(brain->recs, "Brain recs is NULL");
		lu_user_assert_void(brain->mem_perm, "Brain mem_perm is NULL");

		self->w_recs = arr_create((Mem) brain->mem_perm, brain->recs->count);
	}

///////////////////////////////////////////////////////////////////////////////
// API

	lu_bool lu_wave_is_working(Lu_Wave self)
	{
		return false;
	}

	lu_bool lu_wave_cancel(Lu_Wave self)
	{

	}

	lu_size lu_wave_time(Lu_Wave self)
	{

	}

	enum lu_wave_status lu_wave_status(Lu_Wave self)
	{

	}

	lu_size lu_wave_touched_count(Lu_Wave self)
	{

	}

	lu_size lu_wave_excited_count(Lu_Wave self)
	{

	}

	void wave_release(Lu_Wave self)
	{

	}

	Lu_Wave_Resp lu_wave_response(Lu_Wave self)
	{
		lu_user_assert(self, "Lu_Wave is NULL");

		Lu_Wave_Resp resp = NULL;

		wave_release(self);

		return resp;
	}

	void lu_wave_join(Lu_Wave self)
	{
		lu_user_assert_void(self, "Lu_Wave is NULL");
	}


///////////////////////////////////////////////////////////////////////////////
// Static

	static W_Rec wave_rec_get(Lu_Wave self, lu_size id)
	{
		lu_user_assert(id < arr_size(self->w_recs), "id is out of range");

		// lazy 
		W_Rec w_rec = arr_get(self->w_recs, id);

		if (!w_rec)
		{
			Gate gate = self->gate;
			lu_user_assert(gate, "Gate is NULL");

			Lu_Brain brain = gate->brain;
			lu_user_assert(brain, "Brain is NULL");
			lu_user_assert(brain->n_mem, "Brain N_Mem is NULL");

			N_Rec n_rec = n_mem_n_rec_get(brain->n_mem, id);

			w_rec = w_rec_create(brain->mem_perm, n_rec->n_cols_w, n_rec->n_cols_h, n_rec->component_size);

			arr_set(self->w_recs, id, w_rec);
		}

		return w_rec;
	}