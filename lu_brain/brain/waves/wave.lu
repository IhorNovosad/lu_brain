/**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/
 
///////////////////////////////////////////////////////////////////////////////
// Init, create and destroy

	static void wave_init(Lu_Wave self, Gate gate)
	{
		lu_user_assert_void(gate, "Gate is NULL");

		self->gate = gate;

		Lu_Brain brain = gate->brain;
		lu_user_assert_void(brain, "Brain is NULL");
		lu_user_assert_void(brain->n_mem, "Brain n_mem is NULL");

		self->n_mem = brain->n_mem; // for easier access

		lu_user_assert_void(brain->mem_perm, "Brain mem is NULL");

		Arr n_recs = brain->n_mem->n_recs;

		lu_user_assert_void(n_recs, "Brain n_mem n_recs is NULL");

		self->w_recs = arr_create(brain->mem_perm, arr_size(self->n_mem->n_recs));

		N_Rec n_rec;
		W_Rec w_rec;

		for(lu_size i = 0; i < arr_count(n_recs); i++)
		{
			n_rec = n_mem_n_rec_get(brain->n_mem, i);
			lu_user_assert_void(n_rec, "N_Rec is NULL");

			w_rec = w_rec_create(brain->mem_perm, n_rec);

			arr_set(self->w_recs, i, w_rec);

			w_rec_debug_print(w_rec);
		}
	}

///////////////////////////////////////////////////////////////////////////////
// API

	lu_bool lu_wave_is_working(Lu_Wave self)
	{
		return false;
	}

	lu_bool lu_wave_cancel(Lu_Wave self)
	{

	}

	lu_size lu_wave_time(Lu_Wave self)
	{

	}

	enum lu_wave_status lu_wave_status(Lu_Wave self)
	{

	}

	lu_size lu_wave_touched_count(Lu_Wave self)
	{

	}

	lu_size lu_wave_excited_count(Lu_Wave self)
	{

	}

	void wave_release(Lu_Wave self)
	{

	}

	Lu_Wave_Resp lu_wave_response(Lu_Wave self)
	{
		lu_user_assert(self, "Lu_Wave is NULL");

		Lu_Wave_Resp resp = NULL;

		wave_release(self);

		return resp;
	}

	void lu_wave_join(Lu_Wave self)
	{
		lu_user_assert_void(self, "Lu_Wave is NULL");
	}


///////////////////////////////////////////////////////////////////////////////
// Static

