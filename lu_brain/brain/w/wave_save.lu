/**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// 

	Lu_Wave_Mem lu_wave_save(Lu_Wave self, Lu_Story story) 
	{
		lu_user_assert(self, "Lu_Wave is NULL"); 

		story = story_validate(story);
		lu_user_assert(story, "Lu_Story is invalid");

		story = story_prepare(story);
		lu_user_assert(story, "Lu_Story preparation failed");

		self = wave_prepare(self);
		lu_user_assert(self, "Lu_Wave preparation failed");

		wave_save_async_internal(self, story);
		lu_wave_join(self);

		return (Lu_Wave_Mem) self->w_mem;
	} 

	Lu_Wave_Mem lu_wave_save_with_name(Lu_Wave self, Lu_Story story, lu_size name)
	{
		Lu_Wave_Mem wave_mem = lu_wave_save(self, story);
		lu_user_assert(wave_mem, "Cannot save story");

		Lu_Neu neu = lu_wave_mem_top_neu(wave_mem);

		Lu_Neu name_neu = lu_wave_name_find_or_create(wave_mem, name);

		lu_neu_connect(neu, name_neu);

		return (Lu_Wave_Mem) wave_mem;
	}

	void lu_wave_save_async(Lu_Wave self, Lu_Story story)
	{
		lu_user_assert_void(self, "Lu_Wave is NULL");

		story = story_validate(story);
		lu_user_assert_void(story, "Lu_Story is invalid");

		story = story_prepare(story); 
		lu_user_assert_void(story, "Lu_Story preparation failed");

		self = wave_prepare(self);
		lu_user_assert_void(self, "Lu_Wave preparation failed");

		wave_save_async_internal(self, story);
	}
	
	static void wave_save_async_internal(Lu_Wave self, Lu_Story story)
	{
		Lu_Brain brain 	= story->brain;
		Arr recs 		= brain->recs;

		lu_size block_i;
		lu_size rec_i;
		Data data;

		Lu_Rec rec; 
		S_Rec s_rec;

		for(block_i = 0; block_i < story->blocks_count; block_i++)
		{
			for(rec_i = 0; rec_i < story->datum_w; rec_i++)
			{
				s_rec 	= (S_Rec) arr_get(brain->s_mem->recs, rec_i);

				lu_user_assert_void(s_rec, "S_Rec is NULL");

				data 	= story_data_get(story, rec_i, block_i);

				// lu_debug("\n[block=%lu, rec=%lu, (0,0)=", block_i, rec_i);
				// data->values ? lu_debug("%.0f", data->values[0]) : lu_debug("NULL");
				// lu_debug("] SAVING ...");

				if (data->values != NULL) 
					wave_data_save(self, s_rec, data, block_i);
			}
		}
	}

	static void wave_data_save(Lu_Wave self, S_Rec s_rec, Data data, lu_size block_i)
	{
		lu_user_assert_void(self, "Lu_Wave is NULL");
		lu_user_assert_void(self->w_mem, "W_Mem is NULL");
		lu_user_assert_void(s_rec, "S_Rec is NULL");
		lu_user_assert_void(data, "Data is NULL");

		lu_size x;
		lu_size y;
		lu_size z;
		lu_value v;

		S_Cell s_cell;
		
		S_Cell_3 s_cell_3;
		W_Cell_3 w_cell_3;

		W_Rec w_rec 		= w_mem_rec_get(self->w_mem, s_rec->id);

		N_Mem n_mem 		= self->n_mem;
		lu_size p_neu_ix;

		for (y = 0; y < data->h; y++)
			for(x = 0; x < data->w; x++)
			{
				for(z = 0; z < data->d; z++)
				{
					v = data_get(data, x, y, z);

					w_cell_3 = (W_Cell_3) w_rec_cell_get(w_rec, x, y, z);
				}
			}
	}