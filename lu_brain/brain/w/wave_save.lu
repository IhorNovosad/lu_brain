/**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// 

	Lu_Wave_Mem lu_wave_save(Lu_Wave self, Lu_Story story) 
	{
		lu_user_assert(self, "Lu_Wave is NULL"); 

		story = story_validate(story);
		lu_user_assert(story, "Lu_Story is invalid");

		story = story_prepare(story);
		lu_user_assert(story, "Lu_Story preparation failed");

		self = wave_prepare(self);
		lu_user_assert(self, "Lu_Wave preparation failed");

		wave_save_async_internal(self, story);
		lu_wave_join(self);

		return self->w_mem;
	}

	void lu_wave_save_async(Lu_Wave self, Lu_Story story)
	{
		lu_user_assert_void(self, "Lu_Wave is NULL");

		story = story_validate(story);
		lu_user_assert_void(story, "Lu_Story is invalid");

		story = story_prepare(story); 
		lu_user_assert_void(story, "Lu_Story preparation failed");

		self = wave_prepare(self);
		lu_user_assert_void(self, "Lu_Wave preparation failed");

		wave_save_async_internal(self, story);
	}
	
	static void wave_save_async_internal(Lu_Wave self, Lu_Story story)
	{
		Lu_Brain brain 	= story->brain;
		Arr recs 		= brain->recs;

		lu_size block_i;
		lu_size rec_i;
		Data data;

		Lu_Rec rec; 
		S_Rec s_rec;

		for(block_i = 0; block_i < story->blocks_count; block_i++)
		{
			for(rec_i = 0; rec_i < story->datum_w; rec_i++)
			{
				s_rec 	= (S_Rec) arr_get(brain->s_mem->recs, rec_i);

				lu_user_assert_void(s_rec, "S_Rec is NULL");

				data 	= story_data_get(story, rec_i, block_i);

				lu_debug("\n[block=%lu, rec=%lu, (0,0)=", block_i, rec_i);
				data->values ? lu_debug("%.0f", data->values[0]) : lu_debug("NULL");
				lu_debug("] SAVING ...");

				if (data->values != NULL) 
					wave_data_save(self, s_rec, data, block_i);
			}
		}
	}

	static void wave_data_save(Lu_Wave self, S_Rec s_rec, Data data, lu_size block_i)
	{
		lu_user_assert_void(data, "Data is NULL");

		lu_size x;
		lu_size y;
		lu_size z;
		lu_value v;
		lu_value p;

		S_Neu s_cell;
		S_Layer v_layer 	= &s_rec->v_layers[0];

		N_Mem n_mem 		= self->n_mem;
		lu_size p_neu_ix;

		for (y = 0; y < data->h; y++)
			for(x = 0; x < data->w; x++)
			{
				for(z = 0; z < data->d; z++)
				{
					v = data_get(data, x, y, z);

					s_cell = s_layer_neu_get(v_layer, x, y, z);
					lu_user_assert_void(s_cell, "S_Cell is NULL");

					
				}
			}
	}