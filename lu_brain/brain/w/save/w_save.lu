/**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/

#include "save/save_opts.lu"
#include "save/save_resp.lu"

///////////////////////////////////////////////////////////////////////////////
// W_Save_Create_Opts

	static void save_wave_create_opts_init(W_Save_Create_Opts self)
	{
		self->blocks_max_size = 16;
	}

///////////////////////////////////////////////////////////////////////////////
// W_Save

	static W_Save w_save_create(Gate gate, S_Mem s_mem, N_Mem n_mem, W_Save_Create_Opts opts)
	{
		lu_user_assert(opts->blocks_max_size > 0, "Option blocks_max_size should be greater than 0");
		lu_user_assert(gate, "Gate is NULL");

		Lu_Brain brain = gate->brain;

		lu_user_assert(brain, "Lu_Brain is NULL");

		Mem mem = brain->mem_perm;

		lu_user_assert(mem, "Mem is NULL");

		W_Save self 		= (W_Save) mem_alloc(mem, sizeof(struct w_save));
		wave_init(&self->super, gate, s_mem, n_mem);

		return self;
	}


	static void w_save_init_and_reset(W_Save self, Lu_Story story, Lu_Save_Opts opts)
	{
		if (opts)
			self->save_opts = *opts;

		self->super.story 	= story; 
		self->save_opts 	= *opts;
	} 

	static void w_save(W_Save self, Lu_Save_Opts opts, S_Rec s_rec, lu_p_value data, lu_size block_i)
	{
		lu_user_assert_void(self, "Lu_Wave is NULL");
		lu_user_assert_void(s_rec, "S_Rec is NULL");
		lu_user_assert_void(s_rec->rec, "S_Rec rec is NULL");
		lu_user_assert_void(data, "Data is NULL");

	}