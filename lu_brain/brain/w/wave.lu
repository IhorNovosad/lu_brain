/**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/
 
///////////////////////////////////////////////////////////////////////////////
// Init, create and destroy


	Lu_Wave lu_wave_create(Lu_Brain brain)
	{
		lu_user_assert(brain, "Lu_Brain is NULL");
		lu_user_assert(brain->s_mem, "S_Mem is NULL");
		lu_user_assert(brain->n_mem, "N_Mem is NULL");

		Lu_Wave self 		= (Lu_Wave) mem_alloc(g_mem_temp, sizeof(struct lu_wave));
		lu_user_assert(self, "Cannot allocate Lu_Wave");

		self->s_mem 		= brain->s_mem;
		self->n_mem 		= brain->n_mem; 
		self->story 		= NULL;
		self->net 			= NULL;

		return self;
	}

	void lu_wave_destroy(Lu_Wave self)
	{
		mem_free(g_mem_temp, (lu_p_byte) self);
	}




///////////////////////////////////////////////////////////////////////////////
// API

	// lu_bool lu_wave_is_working(Lu_Wave self)
	// {
	// 	return false;
	// }

	// lu_bool lu_wave_cancel(Lu_Wave self)
	// {

	// }

	// lu_size lu_wave_time(Lu_Wave self)
	// {

	// }

	// enum lu_wave_status lu_wave_status(Lu_Wave self)
	// {

	// }

	// lu_size lu_wave_touched_count(Lu_Wave self)
	// {

	// }

	// lu_size lu_wave_excited_count(Lu_Wave self)
	// {

	// }

	// void wave_release(Lu_Wave self)
	// {

	// }


///////////////////////////////////////////////////////////////////////////////
// Static

