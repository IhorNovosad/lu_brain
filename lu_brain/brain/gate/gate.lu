 /**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// Gate_Opts

	//
	//	Default Gate_Opts init
	//
	static void gate_opts_init(Gate_Opts self)
	{
		self->w_saves_size = 1;
		save_wave_create_opts_init(&self->w_save_create_opts);

		self->w_finds_size = 1;
		w_find_create_opts_init(&self->w_find_create_opts);

		self->w_restores_size = 1;
		w_restore_create_opts_init(&self->w_restore_create_opts);
	}

///////////////////////////////////////////////////////////////////////////////
// Gate

	static Gate gate_create(Lu_Brain brain, Gate_Opts opts)
	{
		lu_assert(opts->w_saves_size > 0);
		lu_assert(opts->w_finds_size > 0);
		lu_assert(opts->w_restores_size > 0);
		lu_assert(brain);

		Mem mem = brain->header_mem;

		lu_assert(mem);

		Gate self 			= (Gate) mem_alloc(mem, sizeof(struct gate));
		lu_user_assert(self, "Unable to allocate Gate");

		lu_size i; 

		self->brain 		= brain;

		W_Save w_save;
		W_Find w_find;
		W_Restore w_restore;

		self->save_waves 	= arr_create(mem, opts->w_saves_size);
		lu_user_assert(self->save_waves, "Unable to create save waves array");
		for(i = 0; i < opts->w_saves_size; i++)
      	{
      		w_save = w_save_create(self, brain->s_mem, brain->n_mem, &opts->w_save_create_opts);
      		lu_user_assert(w_save, "Unable to create save wave");
			arr_set(self->save_waves, i, w_save);
		}

		self->find_waves 	= arr_create(mem, opts->w_finds_size);
		lu_user_assert(self->find_waves, "Unable to create find waves array");
		for(i = 0; i < opts->w_finds_size; i++)
		{
			w_find = find_wave_create(self, &opts->w_find_create_opts);
			lu_user_assert(w_find, "Unable to create find wave");
			arr_set(self->find_waves, i, w_find); 
		}

		self->restore_waves = arr_create(mem, opts->w_restores_size);
		lu_user_assert(self->restore_waves, "Unable to create restore waves array");
		for(i = 0; i < opts->w_restores_size; i++)
		{
			w_restore = restore_wave_create(self, &opts->w_restore_create_opts);
			lu_user_assert(w_restore, "Unable to create restore wave");
			arr_set(self->restore_waves, i, w_restore); 
		}

		return self;
	}

 	static W_Save gate_save_wave_wait(Gate self)
 	{
 		// simplified atm
 		W_Save w_save = arr_get(self->save_waves, 0);

 		//w_save_reset(w_save);

 		return w_save;
 	}

	static W_Find gate_find_wave_wait(Gate self)
	{
 		// simplified atm
 		return arr_get(self->find_waves, 0);
	}

	static W_Restore gate_restore_wave_wait(Gate self)
	{
 		// simplified atm
 		return arr_get(self->find_waves, 0);
	}

	static void gate_wave_book(Gate self, Lu_Wave wave)
	{

	}

	static void gate_wave_free(Gate self, Lu_Wave wave)
	{

	}