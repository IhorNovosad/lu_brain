/**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// 

	static N_Mem n_mem_create(Lu_Brain brain, N_Mem_Opts opts)
	{
		lu_user_assert(brain, "Lu_Brain is NULL");
		lu_user_assert(brain->app_mem, "Lu_Brain app_mem is NULL");

		opts = n_mem_opts_validate(opts);
		lu_user_assert(opts, "N_Mem_Opts invalid");

		N_Mem self 			= (N_Mem) mem_alloc(brain->app_mem, sizeof(struct n_mem));
		lu_user_assert(self, "Cannot allocate N_Mem");

		self->brain 		= brain;
		self->opts 			= *opts;

		self->cells 		= NULL;
		self->lins 			= NULL;

		self->names 		= simple_hash_create(brain->app_mem, opts->names_size);
		lu_user_assert(self->names, "Cannot create names");

		return self;
	}

	static N_Mem n_mem_tables_alloc(N_Mem self, Mem mem)
	{
		lu_user_assert(self, "N_Mem is NULL");
		lu_user_assert(mem, "Mem is NULL");

		self->cells 		= n_mem_cells_create(self, mem);
		lu_user_assert(self->cells, "Cannot allocate N_Mem cells");

		self->cells_2 		= n_mem_cells_2_create(self, mem);
		lu_user_assert(self->cells, "Cannot allocate N_Mem cells");

		self->lins 			= n_mem_lins_create(self, mem);
		lu_user_assert(self->lins, "Cannot allocate N_Mem lins");

		return self;
	}

	static Mem_Table n_mem_cells_2_create(N_Mem self, Mem mem)
	{
		lu_user_assert(self, "N_Mem is NULL");
		Lu_Brain brain = self->brain;

		lu_user_assert(brain, "Brain is NULL");
		lu_user_assert(brain->s_mem, "Brain s_mem is NULL");
		lu_user_assert(brain->s_mem->recs, "Recs is NULL");
		lu_user_assert(arr_size(brain->s_mem->recs) > 0, "No s_recs created");

		Arr recs = brain->s_mem->recs;

		// value components size
		lu_size val_coms_size 	= 0;
		S_Rec rec 				= NULL;
		S_Layer layer 			= NULL;
		lu_size i 				= 0;

		for (; i < arr_size(recs); i++)
		{
			rec = (S_Rec) arr_get(recs, i);
			lu_user_assert(rec, "S_Rec is NULL");

			layer = &rec->data_layers[0];
			lu_user_assert(layer, "S_Layer is NULL");

			val_coms_size += s_layer_neus_size(layer);
		}

		Mem_Table cells_2 = mem_table_create(
										mem, 
			/*record_size_in_bytes*/ 	sizeof(struct n_cell_2), 
			/*table_size_in_records*/	val_coms_size + self->opts.names_size, 
			/*percent*/					0,
			/*flags*/					MTF_FREEABLE
		);

		lu_user_assert(cells_2, "Cannot allocate cells_2 Mem_Table");


		return cells_2;
	}

	static Mem_Table n_mem_cells_create(N_Mem self, Mem mem)
	{
		Mem_Table cells = mem_table_create(
										mem, 
			/*record_size_in_bytes*/ 	sizeof(struct n_cell), 
			/*table_size_in_records*/	0, 
			/*percent*/					50,
			/*flags*/					MTF_FREEABLE
		);

		lu_user_assert(cells, "Cannot allocate cells Mem_Table");

		return cells;
	}

	static Mem_Table n_mem_lins_create(N_Mem self, Mem mem)
	{
		Mem_Table lins = mem_table_create(
										mem, 
			/*record_size_in_bytes*/ 	sizeof(struct n_cell), 
			/*table_size_in_records*/	0, 
			/*percent*/					100,
			/*flags*/					MTF_FREEABLE
		);

		lu_user_assert(lins, "Cannot allocate lins Mem_Table");

		return lins;
	}
 	
 	static void n_mem_print_info(N_Mem self)
 	{
 		lu_user_assert_void(self, "N_Mem is NULL");

 		lu_debug("\n\n-- N_Mem info: ");
 		lu_debug("\n 	cells size (bytes): %lu", mem_table_size_in_bytes(self->cells));
 		lu_debug("\n 	lins size (bytes): %lu", mem_table_size_in_bytes(self->lins));
 		lu_debug("\n 	cells_2 size (bytes): %lu", mem_table_size_in_bytes(self->cells_2));
 	}

	static N_Cell n_mem_cell_alloc(N_Mem self)
	{
		lu_user_assert(self, "N_Mem is NULL");

		N_Cell neu = (N_Cell) mem_record_alloc(self->cells);
		lu_user_assert(neu, "Cannot allocate N_Cell");

		return neu;
	}

	static N_Lin n_mem_lin_alloc(N_Mem self)
	{
		lu_user_assert(self, "N_Mem is NULL");

		N_Lin lin = (N_Lin) mem_record_alloc(self->lins);
		lu_user_assert(lin, "Cannot allocate N_Lin");

		return lin;
	}

	static N_Cell_2 n_mem_cell_2_alloc(N_Mem self)
	{
		lu_user_assert(self, "N_Mem is NULL");

		N_Cell_2 neu = (N_Cell_2) mem_record_alloc(self->cells_2);
		lu_user_assert(neu, "Cannot allocate N_Cell_2");

		return neu;
	}


///////////////////////////////////////////////////////////////////////////////
// Neu creators

	// static N_Col n_mem_n_col_create(N_Mem self, S_Col s_col)
	// {
		
		
	// 	return NULL;
	// }

// ///////////////////////////////////////////////////////////////////////////////
// // S_Mem Neu getters

// 	static inline N_Ent neu_ent_get(S_Mem s_mem, lu_size neu_ent_id) 
// 	{  	
// 		return (N_Ent) mem_table_get(s_mem->neu_ents, neu_ent_id);
// 	} 

// 	static inline N_Base neu_b_get(S_Mem s_mem, lu_size neu_b_id) 
// 	{  	
// 		return (N_Base) mem_table_get(s_mem->neu_bs, neu_b_id);
// 	} 

// 	static inline N_Name neu_name_get(S_Mem s_mem, lu_size neu_name_id) 
// 	{  	
// 		return (N_Name) mem_table_get(s_mem->neu_names, neu_name_id);
// 	}

// 	static inline N_Base neu_ent_b_get(S_Mem s_mem, lu_size neu_ent_id) 
// 	{  	
// 		N_Ent ne = (N_Ent) mem_table_get(s_mem->neu_ents, neu_ent_id);
// 		lu_size com_id = ne->cells_2[NEU_B_ID];
// 		return com_id ? neu_b_get(s_mem, com_id) : NULL;
// 	}

// 	static inline N_Name neu_ent_name_get(S_Mem s_mem, lu_size neu_ent_id)
// 	{
// 		N_Ent ne = (N_Ent) mem_table_get(s_mem->neu_ents, neu_ent_id);
// 		lu_size com_id = ne->cells_2[NEU_NAME_ID];
// 		return com_id ? neu_name_get(s_mem, com_id) : NULL;
// 	}

// ///////////////////////////////////////////////////////////////////////////////
// // S_Mem Lin getters

// 	static inline Lin_Ent lin_ent_get(S_Mem s_mem, lu_size lin_ent_id) 
// 	{  	
// 		return (Lin_Ent) mem_table_get(s_mem->lin_ents, lin_ent_id);
// 	} 

// 	static inline Lin_B lin_b_get(S_Mem s_mem, lu_size lin_b_id) 
// 	{  	
// 		return (Lin_B) mem_table_get(s_mem->lin_bs, lin_b_id);
// 	} 

// 	static inline Lin_B lin_ent_b_get(S_Mem s_mem, lu_size lin_ent_id)
// 	{
// 		Lin_Ent lin_ent = (Lin_Ent) mem_table_get(s_mem->lin_ents, lin_ent_id);
// 		lu_size com_id = lin_ent->cells_2[LIN_B_ID];
// 		return com_id ? lin_b_get(s_mem, com_id) : NULL;
// 	}
