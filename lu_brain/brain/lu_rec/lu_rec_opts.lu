/**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/
 
///////////////////////////////////////////////////////////////////////////////
// Init, create and destroy

	Lu_Rec_Opts lu_rec_opts_create_from_predefined(
		Lu_Brain_Opts 				brain_opts, 
		lu_size 					width, 
		lu_size 					height, 
		lu_size 					predefined_config_id
	)
	{
		lu_user_assert(predefined_config_id < LU_ROC_END, "rec_opts_predefined_id is out of range");
		Lu_Rec_Opts_Config config = &lu_g_roc_predefinitions[predefined_config_id];
		lu_user_assert(config, "Lu_Rec_Opts_Config is NULL"); 

		config->width 	= width;
		config->height 	= height;

		config = lu_rec_opts_config_validate(config);
		lu_user_assert(config, "Lu_Rec_Opts_Config validation failed");

		return lu_rec_opts_create(brain_opts, config);
	}

	Lu_Rec_Opts lu_rec_opts_create(
		Lu_Brain_Opts 				brain_opts, 
		Lu_Rec_Opts_Config 			config
	)
	{
		config = lu_rec_opts_config_validate(config);
		lu_user_assert(config, "Lu_Rec_Opts_Config validation failed");

		Lu_Rec_Opts self = (Lu_Rec_Opts) mem_temp_alloc(sizeof(struct lu_rec_opts));

		// Initialize
		self->brain_opts 		= brain_opts;
		self->config 			= *config;

		arr_append(self->brain_opts->rec_opts, self);

		return self;
	}

	void lu_rec_opts_destroy(Lu_Rec_Opts self)
	{
		mem_temp_free((lu_p_byte) self);
	} 
