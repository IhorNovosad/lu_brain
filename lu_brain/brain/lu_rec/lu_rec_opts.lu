/**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/
 
///////////////////////////////////////////////////////////////////////////////
// Init, create and destroy

	Lu_Rec_Opts lu_rec_opts_create_from_predefined(
		Lu_Brain_Opts 				brain_opts, 
		lu_size 					width, 
		lu_size 					height, 
		lu_size 					predefined_config_id
	)
	{
		lu_user_assert(predefined_config_id < LU_ROC_END, "rec_opts_predefined_id is out of range");
		Lu_Rec_Opts_Config config = &lu_g_roc_predefinitions[predefined_config_id];
		lu_user_assert(config, "Lu_Rec_Opts_Config is NULL");

		return lu_rec_opts_create(brain_opts, width, height, config);
	}

	Lu_Rec_Opts lu_rec_opts_create(
		Lu_Brain_Opts 				brain_opts, 
		lu_size 					width, 
		lu_size 					height, 
		Lu_Rec_Opts_Config 			config
	)
	{
		lu_user_assert(width > 0, "Width should be greater than 0");
		lu_user_assert(height > 0, "Height should be greater than 0");

		config = lu_rec_opts_config_validate(config);
		lu_user_assert(config, "Lu_Rec_Opts_Config validation failed");

		Lu_Rec_Opts self = (Lu_Rec_Opts) mem_temp_alloc(sizeof(struct lu_rec_opts));

		// Initialize
		self->brain_opts 		= brain_opts;
		self->width 			= width;
		self->height			= height;

		self->max_blocks_size 	= config->max_blocks_size;

		self->depth 			= config->depth;
		
		self->v_min 			= config->v_min;
		self->v_max 			= config->v_max;
		self->v_neu_size		= config->v_neu_size;
		self->v_nsc				= config->v_nsc;	

		self->p_neu_size		= config->p_neu_size;
		self->p_nsc				= config->p_nsc;

		arr_append(self->brain_opts->rec_opts, self);

		return self;
	}

	void lu_rec_opts_destroy(Lu_Rec_Opts self)
	{
		mem_temp_free((lu_p_byte) self);
	} 

///////////////////////////////////////////////////////////////////////////////
// Properties

	void lu_rec_opts_v_nsc_set(Lu_Rec_Opts self, lu_size val)
	{
		lu_user_assert_void(val < self->v_neu_size / 2, "v_nsc should less than v_neu_size / 2");

		self->v_nsc = val;
	}

	void lu_rec_opns_p_neu_size_set(Lu_Rec_Opts self, lu_size val)
	{
		lu_user_assert_void(val > 1, "p_neu_size should be greater than 1");

		self->p_neu_size = val;
	}

	void lu_rec_opts_p_nsc_set(Lu_Rec_Opts self, lu_size val)
	{
		lu_user_assert_void(val < self->p_neu_size / 2, "p_nsc should less than p_neu_size / 2");

		self->p_nsc = val;
	}

	void lu_rec_opts_max_blocks_size_set(Lu_Rec_Opts self, lu_size val)
	{
		lu_user_assert_void(val > 1, "max_blocks_size should be greater than 1");

		self->max_blocks_size = val;
	} 


///////////////////////////////////////////////////////////////////////////////
// 