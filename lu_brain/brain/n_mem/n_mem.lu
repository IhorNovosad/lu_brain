/**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// Includes

	#include "val_layer.lu"

///////////////////////////////////////////////////////////////////////////////
// N_Channel

	static N_Channel n_channel_create(Mem mem, Rec rec)
	{
		N_Channel self = (N_Channel) mem_alloc(mem, sizeof(struct n_channel));

		lu_user_assert(self, "Cannot allocate N_Channel");

		self->color = val_layer_create(mem, rec);
		self->cont  = val_layer_create(mem, rec);

		return self;
	}

///////////////////////////////////////////////////////////////////////////////
// N_Rec 
	
	static N_Rec n_rec_create(Mem mem, Rec rec)
	{
		N_Rec self 		= (N_Rec) mem_alloc(mem, sizeof(struct n_rec));
		lu_user_assert(self, "Cannot allocate N_Rec");

		self->n_channels 	= arr_create(mem, rec->channel_size);

		N_Channel chan;
		for(lu_size i = 0; i < arr_size(self->n_channels); i++)
		{
			chan = n_channel_create(mem, rec);

			lu_user_assert(chan, "Cannot create n_channel");

			arr_set(self->n_channels, i, chan);
		}

		return self;
	}

///////////////////////////////////////////////////////////////////////////////
// N_Mem

	static N_Mem n_mem_create(Brain brain)
	{
		lu_user_assert(brain, "Brain is NULL");
		lu_user_assert(brain->mem_perm, "Brain mem_perm is NULL");
		lu_user_assert(brain->recs, "Brain recs is NULL");
		lu_user_assert(arr_count(brain->recs) > 0, "Brain without recs");

		Mem mem = brain->mem_perm;

		N_Mem self 			= (N_Mem) mem_alloc(mem, sizeof(struct n_mem));
		lu_user_assert(self, "Cannot allocate N_Mem");

		self->brain 		= brain;

		// dvi percepshyny 
		self->n_recs 		= arr_create(mem, arr_count(brain->recs));

		Rec rec;	
		N_Rec n_rec;
		for(lu_size i = 0; i < arr_size(self->n_recs); i++)
		{
			rec = (Rec) arr_get(brain->recs, i);

			n_rec = n_rec_create(mem, rec);

			lu_user_assert(n_rec, "Cannot create n_rec");

			arr_set(self->n_recs, i, n_rec);
		}

		return self;
	}

