/**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// Includes

	#include "n_col.lu"
	#include "n_rec.lu"

///////////////////////////////////////////////////////////////////////////////
// N_Mem

	static N_Mem n_mem_create(Lu_Brain brain)
	{
		lu_user_assert(brain, "Lu_Brain is NULL");
		lu_user_assert(brain->mem_perm, "Lu_Brain mem_perm is NULL");
		lu_user_assert(brain->recs, "Lu_Brain recs is NULL");
		lu_user_assert(arr_count(brain->recs) > 0, "Lu_Brain without recs");

		Mem mem = brain->mem_perm;

		N_Mem self 			= (N_Mem) mem_alloc(mem, sizeof(struct n_mem));
		lu_user_assert(self, "Cannot allocate N_Mem");

		self->brain 		= brain;
		self->n_recs 		= arr_create(mem, arr_count(brain->recs));

		Lu_Rec rec;	
		N_Rec n_rec;
		for(lu_size i = 0; i < arr_size(self->n_recs); i++)
		{
			rec = (Lu_Rec) arr_get(brain->recs, i);

			n_rec = n_rec_create(self, rec);

			lu_user_assert(n_rec, "Cannot create n_rec");

			arr_set(self->n_recs, i, n_rec);
		}

		return self;
	}


	static void n_mem_save_wave_progress(N_Mem self, Save_Wave wave, lu_size block_i)
	{

	}	

///////////////////////////////////////////////////////////////////////////////
// Neu creators

	static lu_size n_mem_c_neu_create(N_Mem self)
	{
		return ENT_NULL;
	}