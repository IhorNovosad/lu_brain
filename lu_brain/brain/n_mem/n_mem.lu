/**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// Includes

	#include "val_layer.lu"
	#include "n_col.lu"

///////////////////////////////////////////////////////////////////////////////
// N_Rec 
	
	static N_Rec n_rec_create(N_Mem n_mem, Lu_Rec rec)
	{
		lu_user_assert(n_mem, "N_Mem is NULL");
		lu_user_assert(n_mem->brain, "n_mem->brain is NULL");
		lu_user_assert(rec, "Rec is NULL");

		Mem mem = n_mem->brain->mem_perm;

		lu_user_assert(mem, "Mem is NULL");

		lu_user_assert(rec->width > 0, "Rec width is 0");
		lu_user_assert(rec->height > 0, "Rec height is 0");

		N_Rec self 			= (N_Rec) mem_alloc(mem, sizeof(struct n_rec));
		lu_user_assert(self, "Cannot allocate N_Rec");

		lu_size w;
		lu_size h;

		if (rec->width == 1)
			w = 1;
		else 
			w = (lu_size) lu_value_round(((lu_value) rec->width) / 2.0);

		if (rec->height == 1)
			h = 1;
		else
			h = (lu_size) lu_value_round(((lu_value) rec->height) / 2.0);

		self->n_cols = (N_Col*) mem_alloc(
			mem, 
			sizeof(N_Col) * (rec->width + w) * (rec->height * h)
		);

		lu_user_assert(self->n_cols, "Cannot allocate N_Rec n_cols");

		return self;
	}

///////////////////////////////////////////////////////////////////////////////
// N_Mem7

	static N_Mem n_mem_create(Lu_Brain brain)
	{
		lu_user_assert(brain, "Lu_Brain is NULL");
		lu_user_assert(brain->mem_perm, "Lu_Brain mem_perm is NULL");
		lu_user_assert(brain->recs, "Lu_Brain recs is NULL");
		lu_user_assert(arr_count(brain->recs) > 0, "Lu_Brain without recs");

		Mem mem = brain->mem_perm;

		N_Mem self 			= (N_Mem) mem_alloc(mem, sizeof(struct n_mem));
		lu_user_assert(self, "Cannot allocate N_Mem");

		self->brain 		= brain;
		self->n_recs 		= arr_create(mem, arr_count(brain->recs));

		Lu_Rec rec;	
		N_Rec n_rec;
		for(lu_size i = 0; i < arr_size(self->n_recs); i++)
		{
			rec = (Lu_Rec) arr_get(brain->recs, i);

			n_rec = n_rec_create(self, rec);

			lu_user_assert(n_rec, "Cannot create n_rec");

			arr_set(self->n_recs, i, n_rec);
		}

		return self;
	}

