/**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// Create and destroy

	static N_Col n_col_create(
		Mem mem, 
		N_Rec n_rec, 
		lu_size x, 
		lu_size y, 
		lu_size t, 
		enum n_col_type type,
		lu_size component_size
	)
	{
		N_Col self = (N_Col) mem_alloc(mem, sizeof(struct n_col));

		self->x 	= x;
		self->y 	= y;
		self->t 	= t;
		self->type 	= type;

		return self;
	}

///////////////////////////////////////////////////////////////////////////////
// Calculations

	static lu_value n_col_norm(N_Col self, lu_value request)
	{
		lu_value val = request - self->n_rec->orig_min_val;
		if (val < 0) val = 0;
		if (val > self->n_rec->max_val) val = self->n_rec->max_val;

		return val;
	}

	static lu_size n_col_indx(N_Col self, lu_value val)
	{
		return (lu_size) lu_value_round(val / self->n_rec->val_step);
	}

	static struct lu_size_range n_col_indx_range(N_Col self, lu_value val)
	{
		lu_size orig_i = n_col_indx(self, val);

		long begin, end;

		begin = orig_i - self->n_rec->val_ssp_i;
		if (begin < 0) begin = 0;

		end = orig_i + self->n_rec->val_ssp_i;
		if (end > (self->n_rec->val_neu_size - 1)) end = self->n_rec->val_neu_size - 1; 

		struct lu_size_range r;
		r.begin = (lu_size) begin;
		r.end = (lu_size) end;
		return r;
	}

	static lu_value n_col_calc_sig(N_Col self, lu_size val_step_i, lu_value val)
	{ 
		return 1.0 - lu_value_abs(self->n_rec->val_steps[val_step_i] - val) / self->n_rec->max_val;
	}

	static lu_value n_col_step_norm_dist(N_Col self)
	{
		return 1.0 / self->n_rec->val_neu_size;
	}

	// static Neu get_val_neu(ValLayer self, lu_size indx)
	// {
	// 	Neu neu = self->val_neus[indx];
	// 	if (!neu)
	// 	{
	// 		neu = core_neu_alloc(self->core);
	// 		lu_assert(neu != NULL);
			
	// 		neu_inc_count(neu);

	// 		self->val_neus[indx] = neu;
	// 	}

	// 	return neu;
	// }


	static void n_col_send_data(N_Col self, Lu_Wave wave, lu_p_value values)
	{

	}