/**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/

	static void s_rec_debug_print(S_Rec self)
	{
		lu_debug("\n---------------------");
		lu_debug("\nn_cols(%d, %d): ", self->s_cols_w, self->s_cols_h);
		lu_size x, y;
		S_Col col;
		for(y = 0; y < self->s_cols_h; y++)
		{
			lu_debug("\n");
			for(x = 0; x < self->s_cols_w; x++)
			{
				col = s_rec_s_cols_get(self, x, y);

				if (col == NULL)
					lu_debug(" ");
				else
				{
					switch(col->type)
					{
						case NCT_COL:
							lu_debug("c", col->data_x, col->data_y);
							break;
						case NCT_PER_HOR:
							lu_debug("h");
							break;
						case NCT_PER_VER:
							lu_debug("v");
							break;
						case NCT_PER_DIAG:
							lu_debug("x");
							break;
						default:
							lu_debug("ERROR");
					}
				} 
			}
		}

		lu_debug("\n");
	}

	static S_Rec s_rec_create(S_Mem s_mem, Lu_Rec rec)
	{
		lu_user_assert(s_mem, "S_Mem is NULL");
		lu_user_assert(s_mem->brain, "s_mem->brain is NULL");
		lu_user_assert(rec, "Rec is NULL");
		lu_user_assert(rec->max_value > rec->min_value, "Lu_Rec max_value should be greater than Lu_Rec min_value");
		lu_user_assert(rec->val_ssp > 0 && rec->val_ssp <= 0.5, "Lu_Rec val_ssp should be greater than 0 and less equal to 0.5");

		Mem mem = s_mem->brain->mem_perm;

		lu_user_assert(mem, "Mem is NULL");

		S_Rec self = (S_Rec) mem_alloc(mem, sizeof(struct s_rec));
		lu_user_assert(self, "Cannot allocate S_Rec");

		self->id 				= rec->id;
		self->component_size 	= rec->component_size;

		// Initialize
		self->s_mem			= s_mem;
		self->rec 			= rec;

		// rec->width = 10;
		// rec->height = 10;

		if (rec->width == 1)
			self->pers_w = 0;
		else 
			self->pers_w = rec->width - 1;

		if (rec->height == 1)
			self->pers_h = 0;
		else
			self->pers_h = rec->height - 1;

		//lu_debug("\npers_w = %d, pers_h = %d \n", self->pers_w, self->pers_h);

		self->s_cols_w 			= rec->width + self->pers_w;
		self->s_cols_h			= rec->height + self->pers_h;

		self->s_cols = (S_Col*) mem_alloc(
			mem, 
			sizeof(S_Col) * self->s_cols_w * self->s_cols_h 
		);

		lu_user_assert(self->s_cols, "Cannot allocate s_cols");

		self->val_neu_size  = rec->val_neu_size; // value depth in indexes
		self->orig_min_val 	= rec->min_value;
		self->orig_max_val 	= rec->max_value;
		self->max_val 		= self->orig_max_val - self->orig_min_val;
		self->val_step 		= self->max_val / (lu_value) self->val_neu_size;
		self->val_ssp_i 	= (lu_size) lu_value_round(self->max_val * rec->val_ssp / self->val_step); // ssp in indexes

	 	// Kroky preobchysleni
		self->val_steps = (lu_value*) mem_alloc(mem, sizeof(lu_value) * self->val_neu_size);
		lu_user_assert(self->val_steps, "Cannot allocate val_steps");
		
		lu_size i;
		for (i = 0; i < self->val_neu_size; i++)
			self->val_steps[i] = (lu_value)i * self->val_step;

		// stvoryty s_cols
		lu_size x, y, cx, cy;
		S_Col col;
		S_Col temp_col;
		enum n_col_type type = NCT_PER_HOR;

		for (y = 0, cy = 0; y < self->s_cols_h; y++)
			for(x = 0, cx = 0; x < self->s_cols_w; x++)
			{
				col = NULL;

				if (y % 2 == 1)
				{
					temp_col = s_rec_s_cols_get(self, x, y - 1);
					switch(temp_col->type)
					{
						case NCT_COL:
							type = NCT_PER_VER;
							break;
						case NCT_PER_HOR:
							type = NCT_PER_DIAG;
							break;
						default:
							lu_user_assert(false, "Impossible case, something is wrong");
					} 
				}
				else
					type = type == NCT_COL ? NCT_PER_HOR : NCT_COL;

				if (type == NCT_PER_DIAG)
					col = NULL;
				else
				{
					col = s_col_create(mem, self, cx, cy, x, y, type);
					lu_user_assert(col, "Cannot allocate s_col");

					if (type == NCT_COL)
					{
						++cx;

						if (cx >= rec->width) ++cy;
					}
				}

				s_rec_s_cols_set(self, x, y, col);
			}


		s_rec_debug_print(self);

		return self;
	}

