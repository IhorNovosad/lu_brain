/**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/

	static S_Rec s_rec_create(S_Mem s_mem, Lu_Rec rec)
	{
		lu_user_assert(s_mem, "S_Mem is NULL");
		lu_user_assert(s_mem->brain, "s_mem->brain is NULL");
		lu_user_assert(rec, "Rec is NULL");
		lu_user_assert(rec->v_max > rec->v_min, "Lu_Rec v_max should be greater than Lu_Rec v_min");
		lu_user_assert(rec->p_nsc >= 0 && rec->p_nsc <= rec->p_neu_size, "Lu_Rec val_nsc should be greater than 0 and less equal to 0.5");
		lu_user_assert(rec->width > 0, "Lu_Rec width should be greater than 0");
		lu_user_assert(rec->height > 0, "Lu_Rec height should be greater than 0");

		Mem mem = s_mem->brain->mem_perm;

		lu_user_assert(mem, "Mem is NULL");

		S_Rec self = (S_Rec) mem_alloc(mem, sizeof(struct s_rec));
		lu_user_assert(self, "Cannot allocate S_Rec");

		self->mem				= s_mem;
		self->rec 				= rec;
		self->id 				= rec->id;

		s_col_conf_init(&self->v_conf, mem, rec->component_size, rec->v_min, rec->v_max, rec->v_neu_size, rec->v_nsc);
		s_col_conf_init(&self->p_conf, mem, rec->component_size, rec->v_min, rec->v_max, rec->p_neu_size, rec->p_nsc);

		self->cells_w 			= rec->width;
		self->cells_h			= rec->height; 
		self->cells_size 		= self->cells_w * self->cells_h * 2;  
		self->cells_count 		= 0;

		self->cells = (S_Cell*) mem_alloc(mem, sizeof(S_Cell) * self->cells_size);
		lu_user_assert(self->cells, "Cannot allocate cells");

		self->layers_size = self->cells_w > self->cells_h ? self->cells_w : self->cells_h;

		self->v_layers = (S_Layer*) mem_alloc(mem, sizeof(S_Layer) * self->layers_size);
		lu_user_assert(self->v_layers, "Cannot allocate v layers"); 

		self->p_layers = (S_Layer*) mem_alloc(mem, sizeof(S_Layer) * self->layers_size);
		lu_user_assert(self->v_layers, "Cannot allocate p layers");


		///////////////////////////////////////
		// Cells

		self->v_layers[0] = s_layer_create(self, mem, self->cells_w, self->cells_h);
		lu_user_assert(self->v_layers[0], "Cannot create S_Layer");

		s_layer_cells_create(self->v_layers[0], mem, &self->v_conf);

		self->p_layers[0] = s_layer_create(self, mem, self->cells_w, self->cells_h);
		lu_user_assert(self->p_layers[0], "Cannot create S_Layer");

		s_layer_cells_create(self->p_layers[0], mem, &self->p_conf);

		///////////////////////////////////////
		// Neus

		lu_size w, h;
		w = self->cells_w - 1;
		h = self->cells_h - 1;

		self->neus_size = 0;

		while (w > 0 && h > 0)
		{
			self->neus_size += w * h;
			if (w > 0) --w;
			if (h > 0) --h;
		}

		self->neus_size *= 2;
		self->neus = (S_Neu*) mem_alloc(mem, sizeof(S_Neu) * self->neus_size);
		lu_user_assert(self->neus, "Cannot allocate neus");

		//lu_debug("\n YYYYYYYYYYYYYYYYYYYYYYYYYYY w = %d, h = %d, ns= %d", self->cells_w, self->cells_h, self->neus_size);

		// w = self->cells_w - 1;
		// h = self->cells_h - 1;
		// lu_size layer_ix = 0;
		// s_neu_ix neu_ix = 0;
		// S_Layer layer;
		// S_Neu neu;
		// while (w > 0 && h > 0)
		// {
		// 	++layer_ix; 
		// 	if (w > 0) --w;
		// 	if (h > 0) --h;

		// 	self->v_layers[layer_ix] = s_layer_create(self, mem, self->cells_w, self->cells_h, true);
		// 	lu_user_assert(self->v_layers[layer_ix], "Cannot create S_Layer");

		// 	layer = self->v_layers[layer_ix];
		// 	for (y = 0; y < h; y++)
		// 		for (x = 0; x < w; x++)
		// 		{
		// 			neu = s_neu_create(mem, layer_ix, x, y);
		// 			lu_user_assert(neu, "Cannot create S_Neu");

		// 			s_neu_connect(neu, self->v_layers);

		// 			self->neus[neu_ix] = neu;
		// 			s_layer_neu_ix_set(layer, x, y, neu_ix);

		// 			++neu_ix;
		// 		}


		// 	self->p_layers[layer_ix] = s_layer_create(self, mem, self->cells_w, self->cells_h, true);
		// 	lu_user_assert(self->p_layers[layer_ix], "Cannot create S_Layer");

		// 	layer = self->p_layers[layer_ix];
		// 	for (y = 0; y < h; y++)
		// 		for (x = 0; x < w; x++)
		// 		{
		// 			self->neus[neu_ix] = s_neu_create(mem, layer_ix, x, y);
		// 			lu_user_assert(self->neus[neu_ix], "Cannot create S_Neu");

		// 			s_layer_neu_ix_set(layer, x, y, neu_ix);

		// 			++neu_ix;
		// 		}

		// } 

		return self;
	}
