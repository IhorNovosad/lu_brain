/**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/

	static S_Rec s_rec_create(S_Mem s_mem, Lu_Rec rec)
	{
		lu_user_assert(s_mem, "S_Mem is NULL");
		lu_user_assert(s_mem->brain, "s_mem->brain is NULL");
		lu_user_assert(rec, "Rec is NULL");
		lu_user_assert(rec->v_max > rec->v_min, "Lu_Rec v_max should be greater than Lu_Rec v_min");
		
		lu_user_assert(rec->v_nsc >= 0 && rec->v_nsc <= rec->v_neu_size, "Lu_Rec v_nsc should be in [0, v_neu_size] range");
		lu_user_assert(rec->p_nsc >= 0 && rec->p_nsc <= rec->p_neu_size, "Lu_Rec p_nsc should be in [0, p_neu_size] range");
		lu_user_assert(rec->width > 0, "Lu_Rec width should be greater than 0");
		lu_user_assert(rec->height > 0, "Lu_Rec height should be greater than 0");

		Mem mem = s_mem->brain->mem_perm;

		lu_user_assert(mem, "Mem is NULL");

		S_Rec self = (S_Rec) mem_alloc(mem, sizeof(struct s_rec));
		lu_user_assert(self, "Cannot allocate S_Rec");

		self->mem				= s_mem;
		self->rec 				= rec;
		self->id 				= rec->id;

		self->cells_w 			= rec->width;
		self->cells_h			= rec->height; 
		self->cells_d 			= rec->components_size;

		///////////////////////////////////////
		// Confs

		s_neu_conf_init(&self->v_conf, mem, rec->v_min, rec->v_max, rec->v_neu_size, rec->v_nsc);
		s_neu_conf_init(&self->p_conf, mem, rec->v_min, rec->v_max, rec->p_neu_size, rec->p_nsc);

		///////////////////////////////////////
		// VP Layers

		self->vp_layers_size = (self->cells_w > self->cells_h ? self->cells_w : self->cells_h) + 1; 	// odyn dlia component

		self->v_layers = (struct s_layer*) mem_alloc(mem, sizeof(struct s_layer) * self->vp_layers_size);
		lu_user_assert(self->v_layers, "Cannot allocate v layers"); 

		self->p_layers = (struct s_layer*) mem_alloc(mem, sizeof(struct s_layer) * self->vp_layers_size);
		lu_user_assert(self->v_layers, "Cannot allocate p layers");

		///////////////////////////////////////
		// A Layers

		self->blocks_size		= rec->blocks_size;
		self->a_layers_size 	= self->blocks_size;	// a_layers_size = blocks_size, but potentially they could be different

		self->av_layers = (struct s_layer*) mem_alloc(mem, sizeof(struct s_layer) * self->a_layers_size);
		lu_user_assert(self->av_layers, "Cannot allocate av layers"); 

		self->ap_layers = (struct s_layer*) mem_alloc(mem, sizeof(struct s_layer) * self->a_layers_size);
		lu_user_assert(self->ap_layers, "Cannot allocate ap layers");

		///////////////////////////////////////
		// Neus

		lu_size x;
		lu_size y;
		lu_size z;
		lu_size w 	= self->cells_w;
		lu_size h 	= self->cells_h;
		lu_size d	= self->cells_d;
		lu_size wh 	= w * h;

		self->neus_size = 0;

		while (w > 0 && h > 0)
		{
			self->neus_size += w * h * d;
			if (w > 0) --w;
			if (h > 0) --h;
			if (d > 1) d = 1; 
		}

		// dlia d i b 
		self->neus_size *= 2;

		// a_neus (n(n+1))/2 * 2 for d i b
		self->neus_size += self->blocks_size * (self->blocks_size + 1);

		self->neus_count = 0;

		self->neus = (struct s_neu*) mem_alloc(mem, sizeof(struct s_neu) * self->neus_size);
		lu_user_assert(self->neus, "Cannot allocate neus"); 

		///////////////////////////////////////
		// Init Layers And Neus

		w = self->cells_w;
		h = self->cells_h;
		d = self->cells_d;
		lu_size layer_ix = 0;
		S_Neu v_neu;
		S_Neu p_neu;
		S_Layer v_layer;
		S_Layer p_layer;
		S_Layer b_v_layer;
		S_Layer b_p_layer;

		enum s_net_type type;

		while (w > 0 && h > 0)
		{
			lu_user_assert(layer_ix < self->vp_layers_size, "Wrong layer index");

			v_layer = &self->v_layers[layer_ix];
			p_layer = &self->p_layers[layer_ix];

			s_layer_init(v_layer, self, mem, SLT_V, layer_ix, w, h, d);
			lu_user_assert(v_layer, "Cannot init v_layer");
			s_layer_init(p_layer, self, mem, SLT_P, layer_ix, w, h, d);
			lu_user_assert(p_layer, "Cannot init p_layer");

			switch(layer_ix)
			{
				case 0:
					type = SNT_COMPONENT;
					break;
				case 1:
					type = SNT_CELL;
					break;
				default:
					type = SNT_NEU;
			}

			if (layer_ix > 0)
			{
				b_v_layer = &self->v_layers[layer_ix - 1];
				b_p_layer = &self->p_layers[layer_ix - 1];
			}
		
			for (z = 0; z < d; z++)
				for (y = 0; y < h; y++)
					for (x = 0; x < w; x++)
					{
						v_neu = s_rec_neu_init(self, mem, type, v_layer, x, y, z); 
						lu_user_assert(v_neu, "Cannot init v_neu");
						p_neu = s_rec_neu_init(self, mem, type, p_layer, x, y, z); 
						lu_user_assert(p_neu, "Cannot init v_neu");

						switch (type)
						{
							case SNT_COMPONENT:

								break;
							case SNT_CELL:
								break;
							case SNT_NEU:
								s_neu_b_layer_connect(v_neu, b_v_layer); 
								s_neu_b_layer_connect(p_neu, b_p_layer);
								break;
							default:
								lu_user_assert(false, "Something went wrong");
						}

						s_neu_t_connect(v_neu, p_neu);
					}

			++layer_ix; 
			if (w > 0) --w;
			if (h > 0) --h;
			if (d > 1) d = 1;
		}

		lu_user_assert(v_layer->w == 1 && v_layer->h == 1, "Something wrong with v_layer");
		lu_user_assert(p_layer->w == 1 && p_layer->h == 1, "Something wrong with p_layer");

		///////////////////////////////////////
		// Init A Layers 
		S_Layer av_layer;
		S_Layer ap_layer;
		S_Layer b_av_layer = NULL;
		S_Layer b_ap_layer = NULL;
		layer_ix = 0;
		w = self->blocks_size;
		y = 1;
		d = 1;

		while(w > 0)
		{
			lu_user_assert(layer_ix < self->a_layers_size, "Wrong layer index");

			av_layer = &self->av_layers[layer_ix];
			ap_layer = &self->ap_layers[layer_ix];

			if (layer_ix > 0)
			{
				b_av_layer = &self->av_layers[layer_ix - 1];
				b_ap_layer = &self->ap_layers[layer_ix - 1];
			}
			else
			{
				b_av_layer = NULL;
				b_ap_layer = NULL;
			}

			s_layer_init(av_layer, self, mem, SLT_AV, layer_ix, w, y, d);
			lu_user_assert(av_layer, "Cannot init av_layer");
			s_layer_init(ap_layer, self, mem, SLT_AP, layer_ix, w, y, d);
			lu_user_assert(ap_layer, "Cannot init ap_layer");

			for(x = 0; x < w; x++)
			{
				v_neu = s_rec_neu_init(self, mem, SNT_A_NEU, av_layer, x, y - 1, d - 1); 
				lu_user_assert(v_neu, "Cannot init v_neu");
				p_neu = s_rec_neu_init(self, mem, SNT_A_NEU, ap_layer, x, y - 1, d - 1); 
				lu_user_assert(p_neu, "Cannot init p_neu");

				if (b_av_layer)
					s_a_neu_b_layer_connect(v_neu, b_av_layer); 	

				if (b_ap_layer)
					s_a_neu_b_layer_connect(p_neu, b_ap_layer);

				s_neu_t_connect(v_neu, p_neu);
			}

			++layer_ix;
			--w;
		}

		// lu_debug("\nneus_count = %d, neus_size = %d", self->neus_count, self->neus_size);
		// lu_debug("\nv_links_count = %d, v_links_size = %d", self->v_links_count, self->v_links_size);

		lu_user_assert(self->neus_count == self->neus_size, "Something wrong with neus_count");

		return self;
	}

	static S_Neu s_rec_neu_init(S_Rec self, Mem mem, enum s_net_type type, S_Layer layer, lu_size x, lu_size y, lu_size z)
	{
		lu_user_assert(self->neus_count < self->neus_size, "Out of space for S_Neu");

		S_Neu neu = &self->neus[self->neus_count];
		s_neu_init(neu, type, layer, x, y, z);

		char* t;  

		switch (type)
		{
			case SNT_COMPONENT:
				s_rec_component_init(self, mem, neu);
				break;
			case SNT_CELL:
				s_rec_cell_init(self, mem, neu);
				t = "CELL";
				break;
			case SNT_NEU:
				s_rec_mid_tier_neu_init(self, mem, neu);
				t = "NEU";
				break;
			case SNT_A_NEU:
				s_rec_a_neu_init(self, mem, neu);
				t = "A_NEU";
				break;
			default:
				lu_user_assert(false, "Unknown S_Neu type");
		}

		lu_user_assert(neu, "Cannot create S_Neu");

		s_layer_neu_set(layer, x, y, neu);

		++self->neus_count;

		//lu_debug("\n%s b=%d, d=%d", t, neu->b != NULL, neu->d != NULL);

		return neu;
	}

	static S_Neu s_rec_component_init(S_Rec self, Mem mem, S_Neu neu)
	{
		lu_user_assert(neu->type == SNT_COMPONENT, "Wrong neu type");

		neu->d = (S_Neu*) mem_alloc(mem, sizeof(S_Neu));
		lu_user_assert(neu->d, "Cannot allocate neu->d");

		S_Layer layer = neu->layer;
		S_Neu_Conf conf = NULL;
		switch (layer->type)
		{
			case SLT_V:
				conf = &self->v_conf;
				break;
			case SLT_P:
				conf = &self->p_conf;
				break;
			default:
				lu_user_assert(false, "Wrong S_Layer type");
		}

		neu->conf = conf;

		return neu;
	}

	static S_Neu s_rec_cell_init(S_Rec self, Mem mem, S_Neu neu)
	{
		lu_user_assert(neu->type == SNT_CELL, "Wrong neu type");
		
		neu->b = (S_Neu*) mem_alloc(mem, sizeof(S_Neu) * self->cells_d);
		lu_user_assert(neu->b, "Cannot allocate neu->b");

		neu->d = (S_Neu*) mem_alloc(mem, sizeof(S_Neu) * 4);
		lu_user_assert(neu->d, "Cannot allocate neu->d");

		S_Layer layer = neu->layer;
		lu_user_assert(neu->layer, "S_Layer is NULL");

		return neu;
	}

	static S_Neu s_rec_mid_tier_neu_init(S_Rec self, Mem mem, S_Neu neu)
	{
		lu_user_assert(neu->type == SNT_NEU, "Wrong neu type");

		neu->b = (S_Neu*) mem_alloc(mem, sizeof(S_Neu) * 4);
		lu_user_assert(neu->b, "Cannot allocate neu->b");

		neu->d = (S_Neu*) mem_alloc(mem, sizeof(S_Neu) * 4);
		lu_user_assert(neu->d, "Cannot allocate neu->d");

		return neu;
	}

	static S_Neu s_rec_a_neu_init(S_Rec self, Mem mem, S_Neu neu)
	{
		lu_user_assert(neu->type == SNT_A_NEU, "Wrong neu type");

		neu->b = (S_Neu*) mem_alloc(mem, sizeof(S_Neu) * 2);
		lu_user_assert(neu->b, "Cannot allocate neu->b");

		neu->d = (S_Neu*) mem_alloc(mem, sizeof(S_Neu) * 2);
		lu_user_assert(neu->d, "Cannot allocate neu->d");

		return neu;
	}