/**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// 

	static S_Neu s_neu_init(S_Neu self, enum s_net_type type, S_Layer layer, lu_size x, lu_size y)
	{
		lu_user_assert(layer, "S_Layer is NULL");

		self->type 			= type;
		self->layer 		= layer;
		self->x				= x;
		self->y 			= y;

		self->b 			= NULL;
		self->d 			= NULL;
		self->cols 			= NULL;
		self->t 			= NULL;

		return self;
	}

	// static S_Neu s_neu_create(Mem mem, S_Layer layer, lu_size x, lu_size y)
	// {
	// 	lu_user_assert(mem, "Mem is NULL");
	// 	lu_user_assert(layer, "S_Layer is NULL");

	// 	S_Neu self 		= (S_Neu) mem_alloc(mem, sizeof(struct s_neu));

	// 	s_base_init(&self->super, SNT_NEU, layer, x, y);

	// 	self->b_type	= SNT_UNKNOWN;
	// 	self->bvl		= IX_NULL;
	// 	self->bvp		= IX_NULL;
	// 	self->bnl		= IX_NULL;
	// 	self->bnp		= IX_NULL;

	// 	self->d_type	= SNT_UNKNOWN;
	// 	self->dvl		= IX_NULL;
	// 	self->dvp		= IX_NULL;
	// 	self->dnl		= IX_NULL;
	// 	self->dnp		= IX_NULL;

	// 	self->t 		= NULL;		

	// 	return self;
	// } 

	// static inline void s_neu_lin_set(s_neu_ix l[4], lu_size x, lu_size y, s_neu_ix val)
	// {
	// 	l[y * 2 + x] = val;
	// }

	static void s_neu_b_connect(S_Neu neu, struct s_layer* layers)
	{
		lu_user_assert_void(neu, "S_Neu is NULL");

		S_Layer d_layer = neu->layer;
		lu_user_assert_void(d_layer, "S_Layer is NULL");
		lu_user_assert_void(d_layer->l > 0, "Trying to connect to -1 layer");

		S_Layer p_layer = &layers[d_layer->l - 1];
		lu_user_assert_void(p_layer, "S_Layer is NULL"); 

		neu->type 	= p_layer->l == 0 ? SNT_CELL : SNT_NEU;
		lu_size x 		= neu->x;
		lu_size y 		= neu->y;

		// if (neu->b_type == SNT_CELL)
		// {
		// 	s_neu_ix ix 	= s_layer_neu_ix_get(p_layer, x, y);
		// 	neu->p[0] 		= ix;

		// 	neu->p[1] 		= s_layer_neu_ix_get(p_layer, x + 1, y);
		// 	neu->p[2] 		= s_layer_neu_ix_get(p_layer, x + 1, y + 1);
		// 	neu->p[3] 		= s_layer_neu_ix_get(p_layer, x, y + 1);
		// }
		// else 
		// {
		// 	s_neu_ix ix 	= s_layer_neu_ix_get(p_layer, x, y);
		// 	neu->p[0] 		= ix;

		// 	neu->p[1] 		= s_layer_neu_ix_get(p_layer, x + 1, y);
		// 	neu->p[2] 		= s_layer_neu_ix_get(p_layer, x + 1, y + 1);
		// 	neu->p[3] 		= s_layer_neu_ix_get(p_layer, x, y + 1);
		// }

	}

	// static void s_neu_c_connect_next()
	// {

	// }


