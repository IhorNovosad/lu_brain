/**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// Create and destroy

	static S_Layer s_layer_create(S_Rec rec, Mem mem, lu_size l, lu_size w, lu_size h)
	{
		lu_user_assert(rec, "Rec is NULL");
		lu_user_assert(mem, "Mem is NULL");
		lu_user_assert(w > 0, "Width should be greater than 0"); 
		lu_user_assert(h > 0, "Height should be greater than 0");

		S_Layer self 		= (S_Layer) mem_alloc(mem, sizeof(struct s_layer));
		lu_user_assert(self, "Cannot allocate S_Layer");

		self->rec 		= rec;
		self->l 		= l;
		self->w 		= w;
		self->h 		= h;

		self->neus = (s_neu_ix*) mem_alloc(mem, sizeof(s_neu_ix) * w * h);
		lu_user_assert(self->neus, "Cannot allocate S_Layer neus");

		return self;
	}

	static void s_layer_cells_create(S_Layer self, Mem mem, S_Col_Conf conf)
	{
		lu_size x;
		lu_size y;
		S_Cell cell;
		S_Rec rec = self->rec;
		lu_user_assert_void(rec, "Rec is NULL");
		for (y = 0; y < self->h; y++)
			for (x = 0; x < self->w; x++)
			{
				cell = s_cell_create(mem, self, conf, x, y);
				lu_user_assert_void(cell, "Cannot allocate cell");
				
				rec->cells[rec->cells_count] = cell;

				s_layer_neu_ix_set(self, x, y, rec->cells_count);

				++rec->cells_count;
			}

	}