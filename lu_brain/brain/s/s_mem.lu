/**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// S_Mem

	static S_Mem s_mem_create(Lu_Brain brain)
	{
		lu_user_assert(brain, "Lu_Brain is NULL");
		lu_user_assert(brain->mem_perm, "Lu_Brain mem_perm is NULL");
		lu_user_assert(brain->recs, "Lu_Brain recs is NULL");
		lu_user_assert(arr_count(brain->recs) > 0, "Lu_Brain without recs");

		Mem mem = brain->mem_perm;

		S_Mem self 			= (S_Mem) mem_alloc(mem, sizeof(struct s_mem));
		lu_user_assert(self, "Cannot allocate S_Mem");

		self->brain 		= brain;
		self->s_recs 		= arr_create(mem, arr_count(brain->recs));

		Lu_Rec rec;	
		S_Rec s_rec;
		for(lu_size i = 0; i < arr_size(self->s_recs); i++)
		{
			rec = (Lu_Rec) arr_get(brain->recs, i);

			s_rec = s_rec_create(self, rec);

			lu_user_assert(s_rec, "Cannot create s_rec");

			arr_set(self->s_recs, i, s_rec);
		}

		return self;
	}

