/**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// Create and destroy

	static S_V_Cell s_v_cell_create(
		Mem mem, 
		S_Rec s_rec, 
		lu_size x, 
		lu_size y
	)
	{
		lu_user_assert(s_rec, "S_Rec is NULL");

		S_V_Cell self 		= (S_V_Cell) mem_alloc(mem, sizeof(struct s_v_cell));
		lu_user_assert(self, "Cannot allocate S_V_Cell");

		self->s_rec 		= s_rec;

		self->pos.lvl		= 0;
		self->pos.x 		= x;
		self->pos.y 		= y;

		self->s_cols 		= arr_create(mem, s_rec->component_size);

		S_Col s_col;
		for (lu_size i = 0; i < arr_size(self->s_cols); i++)
		{
			s_col = s_col_create(mem, self, &s_rec->v_conf);

			arr_append(self->s_cols, s_col);
		}

		return self;
	}
