/**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/

	static S_Cell s_cell_init(S_Cell self, enum s_cell_type type, S_Layer layer, lu_size l_ix)
	{
		lu_user_assert(layer, "S_Layer is NULL");

		self->type 			= type;

		self->layer 		= layer;
		self->l_ix 			= l_ix;

		self->b 			= NULL;
		self->d 			= NULL;
 
		return self;
	}

	static S_Cell_2 s_cell_2_init(S_Cell_2 self, enum s_cell_type type, S_Layer layer, lu_size l_ix, lu_size x, lu_size y)
	{
		s_cell_init((S_Cell) self, type, layer, l_ix);

		self->x = x;
		self->y = y;

		return self;
	}

	static S_Cell_3 s_cell_3_init(S_Cell_3 self, S_Layer layer, lu_size l_ix, lu_size x, lu_size y, lu_size z)
	{
		s_cell_2_init((S_Cell_2) self, SCT_CELL_3, layer, l_ix, x, y);

		self->z 		= z;
		self->cells 	= NULL;
		self->v_conf 	= NULL;
		self->p_conf 	= NULL;
	} 

	static S_Cell s_component_links_alloc(S_Cell self, S_Rec rec, Mem mem)
	{
		lu_user_assert(self->type == SCT_CELL_3, "Wrong self type");

		self->d = (S_Cell*) mem_alloc(mem, sizeof(S_Cell));
		lu_user_assert(self->d, "Cannot allocate self->d");

		// S_Layer layer = self->layer;
		// S_Layer_Conf conf = NULL;
		// switch (layer->type)
		// {
		// 	case SLT_PYRAS:
		// 		conf = &rec->v_conf;
		// 		break;
		// 	case SLT_P:
		// 		conf = &rec->p_conf;
		// 		break;
		// 	default:
		// 		lu_user_assert(false, "Wrong S_Layer type");
		// }

		// self->conf = conf;

		return self;
	}

	static S_Cell s_pixel_links_alloc(S_Cell self, S_Rec rec, Mem mem)
	{
		lu_user_assert(self->type == SCT_CELL_2, "Wrong self type");
		
		self->b = (S_Cell*) mem_alloc(mem, sizeof(S_Cell) * rec->cells_d);
		lu_user_assert(self->b, "Cannot allocate self->b");

		self->d = (S_Cell*) mem_alloc(mem, sizeof(S_Cell) * 4);
		lu_user_assert(self->d, "Cannot allocate self->d");

		return self;
	}

	static S_Cell s_pyra_links_alloc(S_Cell self, S_Rec rec, Mem mem)
	{
		lu_user_assert(self->type == SCT_CELL_2, "Wrong self type");

		self->b = (S_Cell*) mem_alloc(mem, sizeof(S_Cell) * 4);
		lu_user_assert(self->b, "Cannot allocate self->b");

		self->d = (S_Cell*) mem_alloc(mem, sizeof(S_Cell) * 4);
		lu_user_assert(self->d, "Cannot allocate self->d");

		return self;
	}

	static S_Cell s_block_links_alloc(S_Cell self, S_Rec rec, Mem mem)
	{
		lu_user_assert(self->type == SCT_CELL, "Wrong self type");

		self->b = (S_Cell*) mem_alloc(mem, sizeof(S_Cell));
		lu_user_assert(self->b, "Cannot allocate self->b");

		self->d = (S_Cell*) mem_alloc(mem, sizeof(S_Cell));
		lu_user_assert(self->d, "Cannot allocate self->d");

		return self;
	}