/**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/

	static S_Cell s_cell_init(S_Cell self, enum s_cell_type type, S_Layer layer, lu_size x, lu_size y, lu_size z)
	{
		lu_user_assert(layer, "S_Layer is NULL");

		self->type 			= type;

		self->layer 		= layer;
		self->x				= x;
		self->y 			= y;
		self->z 			= z;

		self->b 			= NULL;
		self->d 			= NULL;
 
		return self;
	}

	static S_Cell s_cell_3_init(S_Cell self, S_Rec rec, Mem mem)
	{
		lu_user_assert(self->type == SNT_CELL_3, "Wrong self type");

		self->d = (S_Cell*) mem_alloc(mem, sizeof(S_Cell));
		lu_user_assert(self->d, "Cannot allocate self->d");

		// S_Layer layer = self->layer;
		// S_Layer_Conf conf = NULL;
		// switch (layer->type)
		// {
		// 	case SLT_PYRAS:
		// 		conf = &rec->v_conf;
		// 		break;
		// 	case SLT_P:
		// 		conf = &rec->p_conf;
		// 		break;
		// 	default:
		// 		lu_user_assert(false, "Wrong S_Layer type");
		// }

		// self->conf = conf;

		return self;
	}

	static S_Cell s_pixel_init(S_Cell self, S_Rec rec, Mem mem)
	{
		lu_user_assert(self->type == SNT_CELL_2, "Wrong self type");
		
		self->b = (S_Cell*) mem_alloc(mem, sizeof(S_Cell) * rec->cells_d);
		lu_user_assert(self->b, "Cannot allocate self->b");

		self->d = (S_Cell*) mem_alloc(mem, sizeof(S_Cell) * 4);
		lu_user_assert(self->d, "Cannot allocate self->d");

		S_Layer layer = self->layer;
		lu_user_assert(self->layer, "S_Layer is NULL");

		return self;
	}

	static S_Cell s_pyra_init(S_Cell self, S_Rec rec, Mem mem)
	{
		lu_user_assert(self->type == SNT_CELL_2, "Wrong self type");

		self->b = (S_Cell*) mem_alloc(mem, sizeof(S_Cell) * 4);
		lu_user_assert(self->b, "Cannot allocate self->b");

		self->d = (S_Cell*) mem_alloc(mem, sizeof(S_Cell) * 4);
		lu_user_assert(self->d, "Cannot allocate self->d");

		return self;
	}

	static S_Cell s_block_init(S_Cell self, S_Rec rec, Mem mem)
	{
		lu_user_assert(self->type == SNT_CELL, "Wrong self type");

		self->b = (S_Cell*) mem_alloc(mem, sizeof(S_Cell));
		lu_user_assert(self->b, "Cannot allocate self->b");

		self->d = (S_Cell*) mem_alloc(mem, sizeof(S_Cell));
		lu_user_assert(self->d, "Cannot allocate self->d");

		return self;
	}