/**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// Create and destroy

	static S_Cell s_cell_create(
		Mem mem, 
		S_Rec rec,  
		S_Col_Conf conf, 
		lu_size x, 
		lu_size y
	)
	{
		lu_user_assert(rec, "S_Rec is NULL");
		lu_user_assert(conf, "S_Col_Conf is NULL");

		S_Cell self 		= (S_Cell) mem_alloc(mem, sizeof(struct s_cell));
		lu_user_assert(self, "Cannot allocate S_Cell");

		self->rec 			= rec;

		s_base_init(&self->super, SNT_CELL, 0, x, y);

		self->cols 			= arr_create(mem, rec->component_size);

		S_Col s_col;
		for (lu_size i = 0; i < arr_size(self->cols); i++)
		{
			s_col = s_col_create(mem, self, conf);

			arr_append(self->cols, s_col);
		}

		return self;
	}
