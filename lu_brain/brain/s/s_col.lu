/**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// Create 

	static inline S_Col s_col_create(
		Mem mem, 
		S_Cell cell, 
		S_Col_Conf conf
	)
	{
		lu_user_assert(cell, "S_Cell is NULL");
		lu_user_assert(conf, "S_Col_Conf is NULL");

		S_Col self 		= (S_Col) mem_alloc(mem, sizeof(struct s_col));

		self->cell 		= cell;
		self->conf 		= conf;
		lu_user_assert(self->conf, "S_Col_Conf is NULL");

		self->neus 		= (n_neu_ix*) mem_alloc(mem, sizeof(n_neu_ix) * self->conf->neu_size);

		return self;
	}

///////////////////////////////////////////////////////////////////////////////
// Calculations


	// static inline N_Col s_col_n_get(S_Col self, lu_size indx)
	// {
	// 	N_Col n_col = self->n_cols[indx];
	// 	if (n_col == NULL)
	// 	{
	// 		neu_ent = n_create(self->n_mem, self, NT_COL);
	// 		self->n_cols[indx] = neu_ent;
	// 	}

	// 	return neu_ent;
	// }

	// static inline N_Col s_col_n_get(S_Col self, lu_value input_val)
	// {
	// 	// lu_value norm_val 	= s_col_conf_norm(self, input_val);
	// 	// lu_size indx 		= s_col_conf_indx(self, norm_val);

	// 	// return n_col_n_get(self, indx);
	// }