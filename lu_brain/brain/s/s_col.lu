/**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// Create and destroy

	static S_Col s_col_create(
		Mem mem, 
		S_Cell s_cell
	)
	{
		lu_user_assert(s_cell, "S_Cell is NULL");

		S_Col self = (S_Col) mem_alloc(mem, sizeof(struct s_col));

		self->s_cell 	= s_cell;
		self->s_rec 	= self->s_cell->s_rec;

		self->n_cols 	= (N_Col*) mem_alloc(mem, sizeof(N_Col) * self->s_rec->val_neu_size);

		return self;
	}

///////////////////////////////////////////////////////////////////////////////
// Calculations

	static lu_value s_col_norm(S_Col self, lu_value request)
	{
		lu_value val = request - self->s_rec->orig_min_val;
		if (val < 0) val = 0;
		if (val > self->s_rec->max_val) val = self->s_rec->max_val;

		return val;
	}

	static lu_size n_col_indx(S_Col self, lu_value val)
	{
		return (lu_size) lu_value_round(val / self->s_rec->val_step);
	}

	static struct lu_size_range s_col_indx_range(S_Col self, lu_value val)
	{
		lu_size orig_i = n_col_indx(self, val);

		long begin, end;

		begin = orig_i - self->s_rec->val_ssp_i;
		if (begin < 0) begin = 0;

		end = orig_i + self->s_rec->val_ssp_i;
		if (end > (self->s_rec->val_neu_size - 1)) end = self->s_rec->val_neu_size - 1; 

		struct lu_size_range r;
		r.begin = (lu_size) begin;
		r.end = (lu_size) end;
		return r;
	}

	static lu_value s_col_calc_sig(S_Col self, lu_size val_step_i, lu_value val)
	{ 
		return 1.0 - lu_value_abs(self->s_rec->val_steps[val_step_i] - val) / self->s_rec->max_val;
	}

	static lu_value s_col_step_norm_dist(S_Col self)
	{
		return 1.0 / self->s_rec->val_neu_size;
	}

	static N_Col n_col_n_get(S_Col self, lu_size indx)
	{
		// N_Col n = self->n_cols[indx];
		// if (c_neu_ent == ENT_NULL)
		// {
		// 	S_Rec s_rec = self->s_rec;
		// 	lu_user_assert_ent(s_rec, "S_Rec is NULL");
		// 	S_Mem s_mem = s_rec->s_mem;
		// 	lu_user_assert_ent(s_mem, "S_Mem is NULL");

		// 	c_neu_ent = s_mem_c_neu_create(s_mem, self);
		// 	self->n_cols[indx] = c_neu_ent;
		// }

		// return c_neu_ent;

		return NULL;
	}

	static N_Col s_col_n_get(S_Col self, lu_value input_val)
	{
		// lu_value norm_val 	= s_col_norm(self, input_val);
		// lu_size indx 		= n_col_indx(self, norm_val);

		// return n_col_n_get(self, indx);
	}