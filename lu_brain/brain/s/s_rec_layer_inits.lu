/**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/  

	static void s_rec_layers_init(S_Rec self, Mem mem)
	{
		lu_user_assert_void(self, "S_Rec is NULL");
		lu_user_assert_void(self->v_layers, "self->v_layers is NULL");
		lu_user_assert_void(self->p_layers, "self->p_layers is NULL");

		self->neus_size = 0;

		lu_size w = self->cells_w;
		lu_size h = self->cells_h;
		lu_size d = self->cells_d;
		lu_size ix = 0;

		S_Layer v_layer 	= &self->v_layers[ix];
		S_Layer p_layer 	= &self->p_layers[ix];

		// Components
		v_layer = s_layer_init(v_layer, self, mem, SLT_V, ix, w, h, d);
		lu_user_assert_void(v_layer, "Cannot init component v_layer");
		self->neus_size += s_layer_neus_size(v_layer);

		p_layer = s_layer_init(p_layer, self, mem, SLT_P, ix, w, h, d);
		lu_user_assert_void(p_layer, "Cannot init component p_layer");
		self->neus_size += s_layer_neus_size(p_layer);

		// Cells 

		d = 1;
		ix = 1;

		v_layer 	= &self->v_layers[ix];
		p_layer 	= &self->p_layers[ix];

		v_layer = s_layer_init(v_layer, self, mem, SLT_V, ix, w, h, d);
		lu_user_assert_void(v_layer, "Cannot init cell v_layer");
		self->neus_size += s_layer_neus_size(v_layer);

		p_layer = s_layer_init(p_layer, self, mem, SLT_P, ix, w, h, d);
		lu_user_assert_void(p_layer, "Cannot init cell p_layer");
		self->neus_size += s_layer_neus_size(p_layer);

		// Pyras

		--w;
		--h;
		ix = 2;

		while (w > 0 && h > 0)
		{
			lu_user_assert_void(ix < self->vp_layers_size, "Index error");

			v_layer = &self->v_layers[ix];
			p_layer = &self->p_layers[ix];

			v_layer = s_layer_init(v_layer, self, mem, SLT_V, ix, w, h, d);
			lu_user_assert_void(v_layer, "Cannot init pyra v_layer");
			self->neus_size += s_layer_neus_size(v_layer);

			p_layer = s_layer_init(p_layer, self, mem, SLT_P, ix, w, h, d);
			lu_user_assert_void(p_layer, "Cannot init pyra p_layer");
			self->neus_size += s_layer_neus_size(p_layer);

			if (w > 0) --w;
			if (h > 0) --h;
			++ix; 
		}

		// Trias

		ix = 0;
		w = self->blocks_size;
		h = 1;
		d = 1;

		while(w > 0)
		{
			lu_user_assert_void(ix < self->a_layers_size, "Wrong layer index");

			v_layer = &self->av_layers[ix];
			p_layer = &self->ap_layers[ix];

			v_layer = s_layer_init(v_layer, self, mem, SLT_AV, ix, w, h, d);
			lu_user_assert_void(v_layer, "Cannot init v_layer");
			self->neus_size += s_layer_neus_size(v_layer);

			p_layer = s_layer_init(p_layer, self, mem, SLT_AP, ix, w, h, d);
			lu_user_assert_void(p_layer, "Cannot init p_layer");
			self->neus_size += s_layer_neus_size(p_layer);

			++ix;
			--w;
		}
	}

	static void s_rec_components_init(S_Rec self, Mem mem)
	{
		lu_user_assert_void(self, "S_Rec is NULL");
		lu_user_assert_void(self->v_layers, "self->v_layers is NULL");
		lu_user_assert_void(self->p_layers, "self->p_layers is NULL");

		lu_size w = self->cells_w;
		lu_size h = self->cells_h;
		lu_size d = self->cells_d;

		S_Layer v_layer 	= &self->v_layers[0];
		S_Layer p_layer 	= &self->p_layers[0];

		lu_size z;
		lu_size y;
		lu_size x;

		S_Neu v_neu = NULL;
		S_Neu p_neu = NULL;

		for (z = 0; z < d; z++)
			for (y = 0; y < h; y++)
				for (x = 0; x < w; x++)
				{
					v_neu = s_rec_neu_alloc(self, mem, SNT_COMPONENT, v_layer, x, y, z); 
					lu_user_assert_void(v_neu, "Cannot init v_neu");

					v_neu = s_neu_component_init(v_neu, self, mem); 
					lu_user_assert_void(v_neu, "Cannot component init v_neu");

					p_neu = s_rec_neu_alloc(self, mem, SNT_COMPONENT, p_layer, x, y, z); 
					lu_user_assert_void(p_neu, "Cannot init v_neu");

					p_neu = s_neu_component_init(p_neu, self, mem); 
					lu_user_assert_void(p_neu, "Cannot component init p_neu");

					s_neu_t_connect(v_neu, p_neu);
				}
	}

	static void s_rec_cells_init(S_Rec self, Mem mem)
	{
		lu_user_assert_void(self, "S_Rec is NULL");
		lu_user_assert_void(self->v_layers, "self->v_layers is NULL");
		lu_user_assert_void(self->p_layers, "self->p_layers is NULL");

		S_Layer v_layer 	= &self->v_layers[1];
		S_Layer b_v_layer 	= &self->v_layers[0];

		lu_size w = v_layer->w;
		lu_size h = v_layer->h;

		S_Layer p_layer 	= &self->p_layers[1];
		S_Layer b_p_layer	= &self->p_layers[0];

		lu_size y;
		lu_size x;

		S_Neu v_neu = NULL;
		S_Neu p_neu = NULL;

		for (y = 0; y < h; y++)
			for (x = 0; x < w; x++)
			{
				v_neu = s_rec_neu_alloc(self, mem, SNT_CELL, v_layer, x, y, 0); 
				lu_user_assert_void(v_neu, "Cannot init v_neu");

				v_neu = s_neu_cell_init(v_neu, self, mem); 
				lu_user_assert_void(v_neu, "Cannot component init v_neu");

				p_neu = s_rec_neu_alloc(self, mem, SNT_CELL, p_layer, x, y, 0); 
				lu_user_assert_void(p_neu, "Cannot init v_neu");

				p_neu = s_neu_cell_init(p_neu, self, mem); 
				lu_user_assert_void(p_neu, "Cannot component init p_neu");

				s_neu_cell_connect(v_neu, b_v_layer);
				s_neu_cell_connect(p_neu, b_p_layer);

				s_neu_t_connect(v_neu, p_neu);
			}
	}

	static void s_rec_pyras_init(S_Rec self, Mem mem)
	{
		S_Neu v_neu;
		S_Neu p_neu;
		S_Layer v_layer;
		S_Layer p_layer;
		S_Layer b_v_layer = NULL;
		S_Layer b_p_layer = NULL;

		lu_size ix;

		lu_size w;
		lu_size h;
		lu_size x;
		lu_size y;

		for(ix = 2; ix < self->vp_layers_size; ix++)
		{

			v_layer 	= &self->v_layers[ix];
			b_v_layer 	= &self->v_layers[ix - 1];

			p_layer 	= &self->p_layers[ix];
			b_p_layer	= &self->p_layers[ix - 1];

			w = v_layer->w;
			h = v_layer->h; 

			for (y = 0; y < h; y++)
				for (x = 0; x < w; x++)
				{
					v_neu = s_rec_neu_alloc(self, mem, SNT_PYRA, v_layer, x, y, 0); 
					lu_user_assert_void(v_neu, "Cannot init v_neu");

					v_neu = s_neu_pyra_init(v_neu, self, mem); 
					lu_user_assert_void(v_neu, "Cannot pyra init v_neu");

					p_neu = s_rec_neu_alloc(self, mem, SNT_PYRA, p_layer, x, y, 0); 
					lu_user_assert_void(p_neu, "Cannot init v_neu");

					p_neu = s_neu_pyra_init(p_neu, self, mem); 
					lu_user_assert_void(p_neu, "Cannot pyra init p_neu");

					s_neu_pyra_connect(v_neu, b_v_layer);
					s_neu_pyra_connect(p_neu, b_p_layer);

					s_neu_t_connect(v_neu, p_neu);
				}
		}
	}

	static void s_rec_trias_init(S_Rec self, Mem mem)
	{
		S_Layer av_layer;
		S_Layer ap_layer;
		S_Layer b_av_layer = NULL;
		S_Layer b_ap_layer = NULL;
		lu_size w;
		lu_size ix;
		lu_size x;
		S_Neu v_neu = NULL;
		S_Neu p_neu = NULL;

		for(ix = 0; ix < self->a_layers_size; ix++)
		{
			av_layer = &self->av_layers[ix];
			ap_layer = &self->ap_layers[ix];

			if (ix > 0)
			{
				b_av_layer = &self->av_layers[ix - 1];
				b_ap_layer = &self->ap_layers[ix - 1];
			}

			w = av_layer->w;

			lu_debug("\nw=%d, h=%d, d=%d", w, av_layer->h, av_layer->d);

			for (x = 0; x < w; x++)
			{
				v_neu = s_rec_neu_alloc(self, mem, SNT_TRIA, av_layer, x, 0, 0); 
				lu_user_assert_void(v_neu, "Cannot init v_neu");

				p_neu = s_rec_neu_alloc(self, mem, SNT_TRIA, ap_layer, x, 0, 0); 
				lu_user_assert_void(p_neu, "Cannot init p_neu");

				// if (ix > 0)
				// {
				// 	s_neu_tria_connect(v_neu, b_av_layer); 	
				// 	s_neu_tria_connect(p_neu, b_ap_layer);
				// }

				s_neu_t_connect(v_neu, p_neu);
			}
		}
	}