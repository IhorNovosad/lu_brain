/**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/

//////////////////////////7/////////////////////////////////////////////////////
// Save_Wave_Create_Opts

	static void save_wave_create_opts_init(Save_Wave_Create_Opts self)
	{
		self->block_neus_size = 256;
	}

//////////////////////////7/////////////////////////////////////////////////////
// Save_Wave

	static void save_wave_init(Save_Wave self, Story story, Save_Opts opts)
	{
		if (opts)
			self->save_opts = *opts;

		self->story = story;
	}

	static Save_Wave save_wave_create(Mem mem, Save_Wave_Create_Opts opts)
	{
		Save_Wave self 		= (Save_Wave) mem_alloc(mem, sizeof(struct save_wave));

		

		return self;
	}

	static void save_wave_process(Save_Wave self)
	{
		// vse connetytsia po chasu
		// i sytuaciyu v odnomu rec i 
		// i sytuaciyu mizh rec
		// i osoblyvo sytuaciyi v odnomu bloci

		if (self == NULL) {
			lu_user_throw("self should not be NULL");
			return;
		}

		Story story = self->story;

		if (story == NULL) {
			lu_user_throw("story should not be NULL");
			return;
		}

		if (story->blocks == NULL || arr_count(story->blocks) < 1) {
			lu_user_throw("story without blocks");
			return;
		}


		// simplified atm
		// multithreading required 

		
	}