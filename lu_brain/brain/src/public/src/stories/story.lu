
 
///////////////////////////////////////////////////////////////////////////////
// Create and destroy

	Story story_create(Brain brain)
	{
		Story self 		= (Story) mem_alloc(g_mem_temp, sizeof(struct story));

		// Initialize
		self->brain 	= brain;
		self->blocks 	= arr_create(g_mem_temp, STORY_INITIAL_BLOCKS_SIZE);
		self->state 	= SS_BLOCK_ENDED;

		return self;
	}

	static void story_each_block_destroy(lu_p_void item)
	{
		Block block = (Block) item;
		block_destroy(block);
	}

	void story_destroy(Story self)
	{
		arr_each(self->blocks, story_each_block_destroy);
		arr_destroy(self->blocks, g_mem_temp);
		mem_free(g_mem_temp, (lu_p_byte) self);
	}

///////////////////////////////////////////////////////////////////////////////
// API

	void story_push(Story self, Rec rec, lu_value* data)
	{
		if (self == NULL) lu_user_throw("self should not be NULL");
		if (rec == NULL) lu_user_throw("rec should not be NULL");
		if (data == NULL) lu_user_throw("data should not be NULL");

		Block block;

		if (self->state == SS_BLOCK_ENDED) 
		{
			block = block_create(self);
			arr_append(self->blocks, block);
		}
		else 
		{
			block = arr_last(self->blocks);
		}

		block_append(block, rec, data);
	}


	Wave story_save_async(Story self, Save_Opts opts)
	{
		Gate gate = brain_gate(self->brain);

		Save_Wave wave = gate_save_wave_wait(gate);

		save_wave_process(wave);

		return (Wave) wave;
	}

	Save_Resp story_save(Story self, Save_Opts opts)
	{
		Wave wave = story_save_async(self, opts);
		
		wave_join(wave);

		return (Save_Resp) wave_response(wave);
	}

	Wave story_find_async(Story self, Find_Opts opts)
	{
		Gate gate = brain_gate(self->brain);

		Find_Wave wave = gate_find_wave_wait(gate);

		find_wave_process(wave);

		return (Wave) wave;
	}

	Find_Resp story_find(Story self, Find_Opts opts)
	{
		Wave wave = story_find_async(self, opts);
		
		wave_join(wave);

		return (Find_Resp) wave_response(wave);
	}

	Wave story_restore_async(Brain brain, Neuron neuron, Restore_Opts opts)
	{ 
		Gate gate = brain_gate(brain);

		Restore_Wave wave = gate_restore_wave_wait(gate);

		restore_wave_process(wave);

		return (Wave) wave;
	}

	Restore_Resp story_restore(Brain brain, Neuron neuron, Restore_Opts opts)
	{
		Wave wave = story_restore_async(brain, neuron, opts);
		
		wave_join(wave);

		return (Restore_Resp) wave_response(wave);
	}

