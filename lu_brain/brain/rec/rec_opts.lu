/**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/
 
///////////////////////////////////////////////////////////////////////////////
// Init, create and destroy

	Lu_Rec_Opts lu_rec_opts_create(
		Lu_Brain_Opts 	brain_opts, 
		lu_size 		width, 
		lu_size 		height, 
		lu_size 		depth,
		lu_value 		v_min, 
		lu_value 		v_max, 
		lu_size 		v_neu_size
	)
	{
		lu_user_assert(width > 0, "Width should be greater than 0");
		lu_user_assert(height > 0, "Height should be greater than 0");
		lu_user_assert(depth > 0, "Depth should be greater than 0");
		lu_user_assert(v_max - v_min > 0, "v_max minus v_min should greater than 0");
		lu_user_assert(v_neu_size > 1, "v_neu_size should be greater than 1");

		Lu_Rec_Opts self = (Lu_Rec_Opts) mem_temp_alloc(sizeof(struct lu_rec_opts));

		// Initialize
		self->brain_opts 		= brain_opts;
		self->width 			= width;
		self->height			= height;
		self->max_blocks_size 	= LU_MAX_BLOCKS_SIZE;

		self->depth 			= depth;
		
		self->v_min 			= v_min;
		self->v_max 			= v_max;
		self->v_neu_size		= v_neu_size;
		self->v_nsc				= 0;	

		self->p_neu_size		= 2;
		self->p_nsc				= 0;

		arr_append(self->brain_opts->rec_opts, self);

		return self;
	}

	void lu_rec_opts_destroy(Lu_Rec_Opts self)
	{
		mem_temp_free((lu_p_byte) self);
	} 

///////////////////////////////////////////////////////////////////////////////
// Properties

	void lu_rec_opts_v_nsc_set(Lu_Rec_Opts self, lu_size val)
	{
		lu_user_assert_void(val < self->v_neu_size / 2, "v_nsc should less than v_neu_size / 2");

		self->v_nsc = val;
	}

	void lu_rec_opns_p_neu_size_set(Lu_Rec_Opts self, lu_size val)
	{
		lu_user_assert_void(val > 1, "p_neu_size should be greater than 1");

		self->p_neu_size = val;
	}

	void lu_rec_opts_p_nsc_set(Lu_Rec_Opts self, lu_size val)
	{
		lu_user_assert_void(val < self->p_neu_size / 2, "p_nsc should less than p_neu_size / 2");

		self->p_nsc = val;
	}

	void lu_rec_opts_max_blocks_size_set(Lu_Rec_Opts self, lu_size val)
	{
		lu_user_assert_void(val > 1, "max_blocks_size should be greater than 1");

		self->max_blocks_size = val;
	} 


///////////////////////////////////////////////////////////////////////////////
// 