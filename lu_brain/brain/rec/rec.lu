 /**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// Includes

	#include "rec_opts.lu"
 
///////////////////////////////////////////////////////////////////////////////
// Init, create and destroy

	static Lu_Rec rec_create(Lu_Brain brain, Lu_Rec_Opts opts)
	{
		lu_user_assert(brain, "Lu_Brain is NULL");
		lu_user_assert(opts, "Opts is NULL");

		Lu_Rec self 			= (Lu_Rec) mem_alloc(brain->mem_perm, sizeof(struct lu_rec));
		lu_user_assert(self, "Cannot allocate lu_rec");

		// Initialize
		self->brain 			= brain;

		self->width 			= opts->width;
		self->height 			= opts->height;
		self->component_size	= opts->component_size;
		self->min_value			= opts->min_value;
		self->max_value 		= opts->max_value;
		self->c_val_neu_size 		= opts->c_val_neu_size;
		self->val_ssp			= opts->val_ssp;

		return self;
	}

	static void rec_destroy(Lu_Rec self)
	{
		mem_free(self->brain->mem_perm, (lu_p_byte) self);
	}

///////////////////////////////////////////////////////////////////////////////
// 