 /**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// Includes

	#include "rec_opts.lu"
 
///////////////////////////////////////////////////////////////////////////////
// Init, create and destroy

	static Lu_Rec rec_create(Lu_Brain brain, Lu_Rec_Opts opts)
	{
		lu_user_assert(brain, "Lu_Brain is NULL");
		lu_user_assert(opts, "Opts is NULL");

		Lu_Rec self 			= (Lu_Rec) mem_alloc(brain->app_mem, sizeof(struct lu_rec));
		lu_user_assert(self, "Cannot allocate lu_rec");

		// Initialize
		self->brain 			= brain;

		self->width 			= opts->width;
		self->height 			= opts->height;
		self->depth				= opts->depth;

		self->hold_blocks_size 	= opts->hold_blocks_size;

		self->v_min				= opts->v_min;
		self->v_max 			= opts->v_max;
		self->v_neu_size 		= opts->v_neu_size; 
		self->v_nsc 			= opts->v_nsc;

		self->p_neu_size		= opts->p_neu_size;
		self->p_nsc 			= opts->p_nsc;

		//lu_debug("\n\nrec->v_nsc=%d\n\n", self->v_nsc);

		return self;
	}

	static void rec_destroy(Lu_Rec self)
	{
		mem_free(self->brain->app_mem, (lu_p_byte) self);
	}

///////////////////////////////////////////////////////////////////////////////
// 