 /**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// Includes

	#include "rec_opts.lu"
 
///////////////////////////////////////////////////////////////////////////////
// Init, create and destroy

	Rec rec_create(Brain brain, Rec_Opts opts)
	{
		lu_user_assert(brain, "Brain is NULL");
		lu_user_assert(opts, "Opts is NULL");

		Rec self 			= (Rec) mem_alloc(brain->mem_perm, sizeof(struct rec));
		lu_user_assert(self, "Cannot allocate rec");

		// Initialize
		self->brain 		= brain;

		self->depth	= opts->depth;

		if (self->depth < 1) self->depth = 1;

		self->width 		= opts->width;
		self->height 		= opts->height;
		self->min_value		= opts->min_value;
		self->max_value 	= opts->max_value;
		self->val_neu_size 	= opts->val_neu_size;
		self->val_ssp		= opts->val_ssp;

		return self;
	}

	void rec_destroy(Rec self)
	{
		mem_free(self->brain->mem_perm, (lu_p_byte) self);
	}

///////////////////////////////////////////////////////////////////////////////
// 