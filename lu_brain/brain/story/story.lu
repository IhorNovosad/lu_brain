/**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// Includes

	#include "block.lu"
 
///////////////////////////////////////////////////////////////////////////////
// Create and destroy

	Lu_Story lu_story_create(Lu_Brain brain, lu_size story_size_in_blocks)
	{
		lu_user_assert(brain, "Lu_Brain should not be NULL");
		lu_user_assert(
			brain->recs && arr_count(brain->recs), 
			"Lu_Brain recs should be created first"
		);

		Lu_Story self 		= (Lu_Story) mem_alloc(g_mem_temp, sizeof(struct lu_story));

		// Initialize
		self->brain 	= brain;

		self->datum_w	= arr_count(self->brain->recs);
		self->datum_h 	= story_size_in_blocks == 0 ? STORY_INITIAL_BLOCKS_SIZE : story_size_in_blocks;

		lu_size w = self->datum_w;
		lu_size h = self->datum_h;

		self->datum 	= (struct data*) mem_alloc(g_mem_temp, sizeof(struct data) * w * h);
		lu_user_assert(self->datum, "Cannot allocate space for data");

		lu_size rec_i;
		lu_size block_i;
		Lu_Rec rec;
		Data data;

		for (rec_i = 0; rec_i < w; rec_i++)
		{
			rec = arr_get(self->brain->recs, rec_i);
			lu_user_assert(rec, "Lu_Rec is NULL");

			for (block_i = 0; block_i < h; block_i++)
			{
				data = story_data_get(self, rec_i, block_i);

				lu_user_assert(data, "Something went wrong");

				data_init(data, 0, 0, rec->components_size, NULL);
			}
		}

		self->y = 0;
		self->start_block_on_next_data = false; 
		self->blocks_count = 0;

		return self;
	}

	void lu_story_destroy(Lu_Story self)
	{
		lu_user_assert_void(self, "Lu_Story is NULL");

		story_wave_detach(self);

		mem_free(g_mem_temp, (lu_p_byte) self->datum);
		mem_free(g_mem_temp, (lu_p_byte) self);
	}

///////////////////////////////////////////////////////////////////////////////
// Private

	static void story_reset(Lu_Story self)
	{
		lu_user_assert_void(self, "Lu_Story should be present");
		lu_user_assert_void(self->brain, "Lu_Story brain should be present");
		lu_user_assert_void(self->datum, "Lu_Story datum should be present");

		lu_size block_i, rec_i;
		Lu_Rec rec;
		Lu_Brain brain = self->brain;
		Data data;

		for(block_i = 0; block_i <= self->y; block_i++)
			for(rec_i = 0; rec_i < self->datum_w; rec_i++)
			{
				data = story_data_get(self, rec_i, block_i);
				lu_user_assert_void(data, "Something went wrong");

				data_reset(data);
			}

		self->y = 0;
		self->start_block_on_next_data = false; 
		self->blocks_count = 0;
	}


	static void story_wave_attach(Lu_Story self, Gate gate, Lu_Wave wave)
	{

	}


	static void story_wave_detach(Lu_Story self)
	{

	}


///////////////////////////////////////////////////////////////////////////////
// API

	void lu_story_push(Lu_Story self, Lu_Rec rec, lu_value* values)
	{
		lu_user_assert_void(self, "Lu_Story should not be NULL"); 
		lu_user_assert_void(rec, "Lu_Rec should not be NULL"); 
		lu_user_assert_void(values, "values should not be NULL");
		lu_user_assert_void(rec->components_size, "Lu_Rec components_size is zero"); 

		if (self->start_block_on_next_data)
		{ 
			// yaksho my na nuliu, to ce itak pochatok bloka
			if (self->blocks_count)
				++self->y;	
			
			self->start_block_on_next_data = false;
		}
	
		Data data = story_data_get(self, rec->id, self->y);
		lu_p_value v = data->values;
		if (v) 
			// new input to the same rec and channel advances story
			++self->y;
			
 		lu_user_assert_void(
 			self->y < self->datum_h, 
 			"Out of available blocks in story."
 		); 
 
 		data = story_data_get(self, rec->id, self->y);
 		data_init(data, rec->width, rec->height, rec->components_size, values);

 		self->blocks_count = self->y + 1;
	} 


	Lu_Wave lu_story_save_async(Lu_Story self, Lu_Save_Opts opts)
	{
		lu_user_assert(self, "Lu_Story should not be NULL");
		lu_user_assert(opts, "Lu_Save_Opts is NULL");

		lu_debug("\nSAVE (blocks_count = %lu)\n", self->blocks_count);

		Lu_Brain brain = self->brain;
		lu_user_assert(brain, "Lu_Story not linked to brain");

		Arr recs = brain->recs;

		lu_user_assert(recs, "Lu_Brain has no recs");
		lu_user_assert(arr_count(recs), "Lu_Brain has no recs1");
		lu_user_assert(self->blocks_count, "Lu_Story without blocks");

		Gate gate = brain_gate(self->brain);

		// my reset wave v gate_save_wave_wait
		W_Save wave = gate_save_wave_wait(gate);

		w_save_init_and_reset(wave, self, opts);

		lu_size block_i;
		lu_size rec_i;
		Data data;

		Lu_Rec rec; 
		S_Rec s_rec;

		for(block_i = 0; block_i < self->blocks_count; block_i++)
		{
			for(rec_i = 0; rec_i < self->datum_w; rec_i++)
			{
				s_rec 	= (S_Rec) arr_get(brain->s_mem->recs, rec_i);

				lu_user_assert(s_rec, "S_Rec is NULL");

				data 	= story_data_get(self, rec_i, block_i);

				lu_debug("\n[block=%lu, rec=%lu, (0,0)=", block_i, rec_i);
				data->values ? lu_debug("%.0f", data->values[0]) : lu_debug("NULL");
				lu_debug("] SAVING ...");

				w_save(wave, opts, s_rec, data, block_i);
			}
		}

		story_wave_attach(self, gate, (Lu_Wave) wave);

		story_reset(self);

		return (Lu_Wave) wave;
	}

	Lu_Save_Resp lu_story_save(Lu_Story self, Lu_Save_Opts opts)
	{
		lu_user_assert(self, "Lu_Story is NULL");
		lu_user_assert(opts, "Lu_Save_Opts is NULL");

		Lu_Wave wave = lu_story_save_async(self, opts);
		
		lu_wave_join(wave);

		return (Lu_Save_Resp) lu_wave_response(wave);
	}

	Lu_Wave lu_story_find_async(Lu_Story self, Lu_Find_Opts opts)
	{
		lu_user_assert(self, "Lu_Story is NULL");
		lu_user_assert(opts, "Lu_Find_Opts is NULL");

		Gate gate = brain_gate(self->brain);

		W_Find wave = gate_find_wave_wait(gate);

		w_find_init(wave, self, opts);

		w_find_progress(wave);

		return (Lu_Wave) wave;
	}

	Lu_Find_Resp lu_story_find(Lu_Story self, Lu_Find_Opts opts)
	{
		lu_user_assert(self, "Lu_Story is NULL");
		lu_user_assert(opts, "Lu_Find_Opts is NULL");

		Lu_Wave wave = lu_story_find_async(self, opts);
		
		lu_wave_join(wave);

		return (Lu_Find_Resp) lu_wave_response(wave);
	}

	Lu_Wave lu_story_restore_async(Lu_Brain brain, Lu_Neuron lu_neuron, Lu_Restore_Opts opts)
	{ 
		lu_user_assert(brain, "Lu_Brain is NULL");
		lu_user_assert(lu_neuron, "Lu_Neuron is NULL");
		lu_user_assert(opts, "Lu_Restore_Opts is NULL");

		Gate gate = brain_gate(brain);

		W_Restore wave = gate_restore_wave_wait(gate);

		w_restore_init(wave, brain, opts);

		w_restore_process(wave);

		return (Lu_Wave) wave;
	}

	Lu_Restore_Resp lu_story_restore(Lu_Brain brain, Lu_Neuron lu_neuron, Lu_Restore_Opts opts)
	{
		lu_user_assert(brain, "Lu_Brain is NULL");
		lu_user_assert(lu_neuron, "Lu_Neuron is NULL");
		lu_user_assert(opts, "Lu_Restore_Opts is NULL");

		Lu_Wave wave = lu_story_restore_async(brain, lu_neuron, opts);
		
		lu_wave_join(wave);

		return (Lu_Restore_Resp) lu_wave_response(wave);
	}

