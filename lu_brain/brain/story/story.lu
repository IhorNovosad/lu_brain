/**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/

#include "block.lu"

///////////////////////////////////////////////////////////////////////////////
// Create and destroy

	Lu_Story lu_story_create(Lu_Brain brain, lu_size story_size_in_blocks)
	{
		lu_user_assert(brain, "Lu_Brain should not be NULL");
		lu_user_assert(
			brain->recs && arr_count(brain->recs), 
			"Lu_Brain recs should be created first"
		);

		Lu_Story self 		= (Lu_Story) mem_alloc(g_mem_temp, sizeof(struct lu_story));

		// Initialize
		self->brain 	= brain;

		self->datum_w	= arr_count(self->brain->recs);
		self->datum_h 	= story_size_in_blocks == 0 ? STORY_INITIAL_BLOCKS_SIZE : story_size_in_blocks;

		lu_size w = self->datum_w;
		lu_size h = self->datum_h;

		self->datum 	= (struct data*) mem_alloc(g_mem_temp, sizeof(struct data) * w * h);
		lu_user_assert(self->datum, "Cannot allocate space for data");

		lu_size rec_i;
		lu_size block_i;
		Lu_Rec rec;
		Data data;

		for (rec_i = 0; rec_i < w; rec_i++)
		{
			rec = arr_get(self->brain->recs, rec_i);
			lu_user_assert(rec, "Lu_Rec is NULL");

			for (block_i = 0; block_i < h; block_i++)
			{
				data = story_data_get(self, rec_i, block_i);

				lu_user_assert(data, "Something went wrong");

				data_init(data, 0, 0, rec->depth, NULL);
			}
		}

		self->y = 0;
		self->start_block_on_next_data = false; 
		self->blocks_count = 0;

		return self;
	}

	void lu_story_destroy(Lu_Story self)
	{
		lu_user_assert_void(self, "Lu_Story is NULL");

		mem_free(g_mem_temp, (lu_p_byte) self->datum);
		mem_free(g_mem_temp, (lu_p_byte) self);
	}

///////////////////////////////////////////////////////////////////////////////
// 

	void lu_story_reset(Lu_Story self)
	{
		lu_user_assert_void(self, "Lu_Story should be present");
		lu_user_assert_void(self->brain, "Lu_Story brain should be present");
		lu_user_assert_void(self->datum, "Lu_Story datum should be present");

		lu_size block_i;
		lu_size rec_i;
		Data data;

		for(block_i = 0; block_i < self->blocks_count; block_i++)
			for(rec_i = 0; rec_i < self->datum_w; rec_i++)
			{
				data = story_data_get(self, rec_i, block_i);
				lu_user_assert_void(data, "Something went wrong");

				data_reset(data);
			}

		self->y = 0;
		self->start_block_on_next_data = false; 
		self->blocks_count = 0;
	}

	void lu_story_push(Lu_Story self, Lu_Rec rec, lu_value* values)
	{
		lu_user_assert_void(self, "Lu_Story should not be NULL"); 
		lu_user_assert_void(rec, "Lu_Rec should not be NULL"); 
		lu_user_assert_void(values, "values should not be NULL");
		lu_user_assert_void(rec->depth, "Lu_Rec depth is zero"); 

		if (self->start_block_on_next_data)
		{ 
			// yaksho my na nuliu, to ce itak pochatok bloka
			if (self->blocks_count)
				++self->y;	
			
			self->start_block_on_next_data = false;
		}
	
		Data data = story_data_get(self, rec->id, self->y);
		lu_p_value v = data->values;
		if (v) 
			// new input to the same rec and channel advances story
			++self->y;
			
 		lu_user_assert_void(
 			self->y < self->datum_h, 
 			"Out of available blocks in story."
 		); 
 
 		data = story_data_get(self, rec->id, self->y);
 		data_init(data, rec->width, rec->height, rec->depth, values);

 		self->blocks_count = self->y + 1;
	} 

		static Data story_first_non_null_data(Lu_Story self, lu_size rec_i)
	{
		lu_user_assert(self, "Lu_Story is NULL");

		lu_size block_i;
		Data data;

		for(block_i = 0; block_i < self->blocks_count; block_i++)
		{
			data = story_data_get(self, rec_i, block_i);
			if (data && data->values) return data;
		}

		return NULL;
	}

	static Lu_Story story_validate(Lu_Story self)
	{
		lu_user_assert(self, "Lu_Story is NULL");
		lu_user_assert(self->blocks_count, "Lu_Story has no blocks");
		lu_user_assert(self->brain, "Lu_Story not linked to brain");

		lu_user_assert(self->brain->recs, "Lu_Brain has no recs");
		lu_user_assert(arr_count(self->brain->recs), "Lu_Brain has no recs");


		return self;
	}

	static Lu_Story story_prepare(Lu_Story self)
	{
		lu_user_assert(self, "Lu_Story is NULL");

		lu_size block_i;
		lu_size rec_i;
		Data d1;
		Data d2;

		for(rec_i = 0; rec_i < self->datum_w; rec_i++)
			for(block_i = 0; block_i < self->blocks_count; block_i++)
			{
				d1 = story_data_get(self, rec_i, block_i);
				lu_user_assert(d1, "Something went wrong");

				//lu_debug("\n FILL GAPS (rec_i=%d, block_i=%d)", rec_i, block_i);

				if (d1->values) continue;
				
				if (block_i == 0)
				{
					d2 = story_first_non_null_data(self, rec_i);
					if (d2 == NULL) return NULL; 					// nema danyh dlia rec_i vzahali
					data_shallow_copy(d1, d2);
				}
				else
				{
					d2 = story_data_get(self, rec_i, block_i - 1);
					data_shallow_copy(d1, d2);
				}
			}

		return self;
	}