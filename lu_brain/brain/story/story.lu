/**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// Includes

	#include "block.lu"
 
///////////////////////////////////////////////////////////////////////////////
// Create and destroy

	Lu_Story lu_story_create(Lu_Brain brain, lu_size story_size_in_blocks)
	{
		lu_user_assert(brain, "Lu_Brain should not be NULL");
		lu_user_assert(
			brain->recs && arr_count(brain->recs), 
			"Lu_Brain recs should be created first"
		);

		Lu_Story self 		= (Lu_Story) mem_alloc(g_mem_temp, sizeof(struct lu_story));

		// Initialize
		self->brain 	= brain;

		lu_size w 		= arr_count(self->brain->recs);
		lu_size h 		= story_size_in_blocks == 0 ? STORY_INITIAL_BLOCKS_SIZE : story_size_in_blocks;
		self->data 		= arr2_create(g_mem_temp, w, h);

		lu_size x, y;
		Lu_Rec rec;

		story_reset(self);

		return self;
	}

	void lu_story_destroy(Lu_Story self)
	{
		lu_user_assert_void(self, "Lu_Story is NULL");

		story_wave_detach(self);

		arr2_destroy(self->data, g_mem_temp);
		mem_free(g_mem_temp, (lu_p_byte) self);
	}

///////////////////////////////////////////////////////////////////////////////
// Private

	static void story_reset(Lu_Story self)
	{
		lu_user_assert_void(self, "Lu_Story should be present");
		lu_user_assert_void(self->brain, "Lu_Story brain should be present");
		lu_user_assert_void(self->data, "Lu_Story data should be present");

		lu_size block_i, rec_i;
		Arr2 data = self->data;
		Lu_Rec rec;
		Lu_Brain brain = self->brain;

		for(block_i = 0; block_i <= self->y; block_i++)
			for(rec_i = 0; rec_i < arr2_width(data); rec_i++)
				arr2_set(data, rec_i, block_i, NULL);


		self->y = 0;
		self->start_block_on_next_data = false; 
		self->block_count = 0;
	}


	static void story_wave_attach(Lu_Story self, Gate gate, Lu_Wave wave)
	{

	}


	static void story_wave_detach(Lu_Story self)
	{

	}


///////////////////////////////////////////////////////////////////////////////
// API

	void lu_story_push(Lu_Story self, Lu_Rec rec, lu_value* data)
	{
		lu_user_assert_void(self, "Lu_Story should not be NULL"); 
		lu_user_assert_void(rec, "Lu_Rec should not be NULL"); 
		lu_user_assert_void(data, "data should not be NULL");
		lu_user_assert_void(rec->component_size, "Lu_Rec component_size is zero"); 

		if (self->start_block_on_next_data)
		{ 
			// yaksho my na nuliu, to ce itak pochatok bloka
			if (self->block_count)
				++self->y;	
			
			self->start_block_on_next_data = false;
		}
	
		lu_p_value v = arr2_get(self->data, rec->id, self->y);
		if (v) 
			// new input to the same rec and channel advances story
			++self->y;
			
 		lu_user_assert_void(
 			self->y < arr2_height(self->data), 
 			"Out of available blocks in story."
 		); 

 		arr2_set(self->data, rec->id, self->y, (lu_p_void) data);

 		self->block_count = self->y + 1;
	} 


	Lu_Wave lu_story_save_async(Lu_Story self, Lu_Save_Opts opts)
	{
		lu_user_assert(self, "Lu_Story should not be NULL");
		lu_user_assert(opts, "Lu_Save_Opts is NULL");

		lu_debug("\nSAVE (block_count = %lu)\n", self->block_count);

		Lu_Brain brain = self->brain;
		lu_user_assert(brain, "Lu_Story not linked to brain");

		Arr recs = brain->recs;

		lu_user_assert(recs, "Lu_Brain has no recs");
		lu_user_assert(arr_count(recs), "Lu_Brain has no recs1");
		lu_user_assert(self->block_count, "Lu_Story without blocks");

		Gate gate = brain_gate(self->brain);

		// my reset wave v gate_save_wave_wait
		W_Save wave = gate_save_wave_wait(gate);

		w_save_init_and_reset(wave, self, opts);

		lu_size block_i;
		lu_size rec_i;
		lu_p_value curr_d;

		Lu_Rec rec; 
		Arr2 data = self->data;

		S_Rec s_rec;

		for(block_i = 0; block_i < self->block_count; block_i++)
		{
			for(rec_i = 0; rec_i < arr2_width(data); rec_i++)
			{
				s_rec 	= (S_Rec) arr_get(brain->s_mem->recs, rec_i);

				lu_user_assert(s_rec, "S_Rec is NULL");

				curr_d 	= arr2_get(data, rec_i, block_i);

				lu_debug("\n DATA(lu_block=%lu, rec=%lu): ", block_i, rec_i);
				curr_d ? lu_debug("%.0f ", curr_d[0]) : lu_debug("NULL ");

				w_save(wave, opts, s_rec, curr_d, block_i);
			}
		}

		story_wave_attach(self, gate, (Lu_Wave) wave);

		story_reset(self);

		return (Lu_Wave) wave;
	}

	Lu_Save_Resp lu_story_save(Lu_Story self, Lu_Save_Opts opts)
	{
		lu_user_assert(self, "Lu_Story is NULL");
		lu_user_assert(opts, "Lu_Save_Opts is NULL");

		Lu_Wave wave = lu_story_save_async(self, opts);
		
		lu_wave_join(wave);

		return (Lu_Save_Resp) lu_wave_response(wave);
	}

	Lu_Wave lu_story_find_async(Lu_Story self, Lu_Find_Opts opts)
	{
		lu_user_assert(self, "Lu_Story is NULL");
		lu_user_assert(opts, "Lu_Find_Opts is NULL");

		Gate gate = brain_gate(self->brain);

		W_Find wave = gate_find_wave_wait(gate);

		w_find_init(wave, self, opts);

		w_find_progress(wave);

		return (Lu_Wave) wave;
	}

	Lu_Find_Resp lu_story_find(Lu_Story self, Lu_Find_Opts opts)
	{
		lu_user_assert(self, "Lu_Story is NULL");
		lu_user_assert(opts, "Lu_Find_Opts is NULL");

		Lu_Wave wave = lu_story_find_async(self, opts);
		
		lu_wave_join(wave);

		return (Lu_Find_Resp) lu_wave_response(wave);
	}

	Lu_Wave lu_story_restore_async(Lu_Brain brain, Lu_Neuron lu_neuron, Lu_Restore_Opts opts)
	{ 
		lu_user_assert(brain, "Lu_Brain is NULL");
		lu_user_assert(lu_neuron, "Lu_Neuron is NULL");
		lu_user_assert(opts, "Lu_Restore_Opts is NULL");

		Gate gate = brain_gate(brain);

		W_Restore wave = gate_restore_wave_wait(gate);

		w_restore_init(wave, brain, opts);

		w_restore_process(wave);

		return (Lu_Wave) wave;
	}

	Lu_Restore_Resp lu_story_restore(Lu_Brain brain, Lu_Neuron lu_neuron, Lu_Restore_Opts opts)
	{
		lu_user_assert(brain, "Lu_Brain is NULL");
		lu_user_assert(lu_neuron, "Lu_Neuron is NULL");
		lu_user_assert(opts, "Lu_Restore_Opts is NULL");

		Lu_Wave wave = lu_story_restore_async(brain, lu_neuron, opts);
		
		lu_wave_join(wave);

		return (Lu_Restore_Resp) lu_wave_response(wave);
	}

