/**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// Init, create, destroy

	static Lu_Data lu_data_create_via_deep_copy(Mem mem, Lu_Data src)
	{
		lu_assert(mem);
		lu_data_validate_exists(src);

		Lu_Data self = (Lu_Data) mem_alloc(mem, sizeof(struct lu_data));
		lu_assert(self);

		lu_size x;
		lu_size y;
		lu_size z;

		self->w 		= src->w;
		self->h 		= src->h;
		self->d 		= src->d;
		self->values 	= (lu_p_value) mem_alloc(mem, sizeof(lu_value) * self->w * self->h * self->d);

		for(z = 0; z < src->d; z++)
			for (y = 0; y < src->h; y++)
				for(x = 0; x < src->w; x++)
					lu_data_value_set(self, x, y, z, lu_data_value_get(src, x, y, z));

		return self;
	}

	static void lu_data_destroy(Lu_Data self, Mem mem)
	{
		lu_assert(self);
		lu_assert(mem);

		if (self->values) 
		{
			mem_free(mem, (lu_p_byte) self->values);
			self->values = NULL;
		}

		mem_free(mem, (lu_p_byte) self);
	}

///////////////////////////////////////////////////////////////////////////////
// Copy



///////////////////////////////////////////////////////////////////////////////
// Transformations

	static Lu_Data lu_data_create_by_shift(Mem mem, Lu_Data src, lu_int x_shift, lu_int y_shift) 
	{
		lu_assert(mem);
		lu_data_validate_exists(src);


		return NULL;
	}

///////////////////////////////////////////////////////////////////////////////
// Debug

	static void lu_data_debug(Lu_Data d)
	{

	}