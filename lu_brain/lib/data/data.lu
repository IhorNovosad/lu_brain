/**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/

	static Lu_Data lu_data_create(Mem mem)
	{
		Lu_Data self = (Lu_Data) mem_alloc(mem, sizeof(struct lu_data));
		lu_assert(self);

		lu_data_init_default(self);

		return self;
	}

	static void lu_data_destroy(Lu_Data self, Mem mem)
	{
		lu_assert(self);
		lu_assert(mem);

		mem_free(mem, (lu_p_byte) self);
	}

	static void lu_data_debug(Lu_Data d)
	{

	}

	static Lu_Data lu_data_deep_copy(Lu_Data dest, Lu_Data src)
	{
		lu_assert(dest);
		lu_assert(src);

		lu_assert(dest->w == 0 || dest->w == src->w);
		lu_assert(dest->h == 0 || dest->h == src->h);
		lu_assert(dest->d == 0 || dest->d == src->d);
		lu_assert(dest->values == NULL);

		lu_size x;
		lu_size y;
		lu_size z;

		dest->w = src->w;
		dest->h = src->h;
		dest->d = src->d;

		if (src->values)
			for(z = 0; z < src->d; z++)
				for (y = 0; y < src->h; y++)
					for(x = 0; x < src->w; x++)
						lu_data_value_set(dest, x, y, z, lu_data_value_get(src, x, y, z));

		return dest;
	}