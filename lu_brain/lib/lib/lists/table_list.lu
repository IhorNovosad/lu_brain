/**
	Copyright Â© 2020 Oleh Ihorovych Novosad (Novossaad)
*/

///////////////////////////////////////////////////////////////////////////////
// Init, create and destroy

	Lu_Table_List lu_table_list_create(Mem mem, lu_size max_size_in_items)
	{
		lu_assert(mem);
		lu_assert(max_size_in_items > 0);
	
		Lu_Table_List self 				= (Lu_Table_List) mem_alloc(mem, sizeof(struct lu_table_list));
		lu_assert(self);

		lu_list_init(&self->super, mem);

		self->mem_table 	= mem_table_create(
			mem, 
			sizeof(struct lu_l_node),
			max_size_in_items,
			0,
			MTF_FREEABLE
		);
		lu_assert(self->mem_table);

		self->max_size 		= max_size_in_items;

		return self;
	}


	void lu_table_list_destroy(Lu_Table_List self)
	{
		lu_assert(self);
		mem_table_destroy(self->mem_table);
		mem_free(self->super.mem, (lu_p_byte) self);
	}

	Lu_L_Node lu_table_l_node_create(Lu_List list)
	{
		lu_assert(list);

		Lu_Table_List self = (Lu_Table_List) list;
		lu_assert(self->mem_table);

		Lu_L_Node node = (Lu_L_Node) mem_record_alloc(self->mem_table);
		lu_assert(node);

		return node;
	}

	void lu_table_l_node_destroy(Lu_List list, Lu_L_Node* l_node)
	{
		lu_assert(list);
		lu_assert(*l_node);

		Lu_Table_List self = (Lu_Table_List) list;
 		lu_assert(self->mem_table);

		mem_record_free(self->mem_table, (lu_p_byte) *l_node);
		*l_node = NULL;
	}

	Lu_L_Node lu_table_list_append(Lu_Table_List self, lu_p_void value)
	{
		// if out of items, remove first
		if (lu_table_list_count(self) >= self->max_size)
			lu_table_list_remove(self, lu_list_first_node(&self->super));

		return lu_list_append_with_node_creator((Lu_List) self, value, lu_table_l_node_create);
	}
	
	void lu_table_list_remove(Lu_Table_List self, Lu_L_Node node)
	{
		lu_list_remove_with_node_destroyer((Lu_List) self, node, lu_table_l_node_destroy);
	}

	void lu_table_list_destroy_all(Lu_Table_List self)
	{
		lu_debug_message("NOT IMPLEMENTED");
	}