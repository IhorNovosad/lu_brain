/**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// S_Mem

	static S_Mem s_mem_create(Lu_Brain brain)
	{
		lu_user_assert(brain, "Lu_Brain is NULL");
		lu_user_assert(brain->recs, "Lu_Brain recs is NULL");

		S_Mem self 			= (S_Mem) mem_temp_alloc(sizeof(struct s_mem));
		lu_user_assert(self, "Cannot allocate S_Mem");

		self->brain 		= brain;
		self->recs 			= arr_temp_create(arr_size(brain->recs), false);

		// Lu_Rec rec;	
		// S_Rec s_rec;
		// for(lu_size i = 0; i < arr_size(self->recs); i++)
		// {
		// 	rec = (Lu_Rec) arr_get(brain->recs, i);

		// 	s_rec = s_rec_create(self, rec);

		// 	lu_user_assert(s_rec, "Cannot create s_rec");

		// 	arr_set(self->recs, i, s_rec);
		// }

		return self;
	}

	static void s_mem_destroy(S_Mem self)
	{
		lu_user_assert_void(self, "S_Mem is NULL");

		S_Rec s_rec;
		for(lu_size i = 0; i < arr_count(self->recs); i++)
		{
			s_rec = (S_Rec) arr_get(self->recs, i);
			s_rec_destroy(s_rec);
		}

		arr_temp_destroy(self->recs);
		mem_temp_free((lu_p_byte) self);
	}

	static void s_mem_print_info(S_Mem self)
	{
		lu_user_assert_void(self, "S_Mem is NULL");
		lu_user_assert_void(self->recs, "S_Mem recs is NULL");

 		lu_debug("\n\n-- S_Mem info: ");
 		lu_debug("\n 	S_Rec count: %lu", arr_count(self->recs));

 		S_Rec rec;
 		lu_size i;
 		for(i = 0; i < arr_count(self->recs); i++)
 		{
 			rec = (S_Rec) arr_get(self->recs, i);
 			s_rec_print_info(rec);
 		}
	}
