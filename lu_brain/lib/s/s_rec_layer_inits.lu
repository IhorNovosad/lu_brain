/**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/  

	static void s_rec_layers_init(S_Rec self)
	{
		lu_user_assert_void(self, "S_Rec is NULL");
		lu_user_assert_void(self->data_layers, "self->data_layers is NULL");
		lu_user_assert_void(self->block_layers, "self->block_layers is NULL");

		self->cells_size = 0;

		lu_size w = self->cells_w;
		lu_size h = self->cells_h;
		lu_size d = self->cells_d;
		lu_size ix = 0;

		S_Layer layer 	= &self->data_layers[ix];

		// Components
		layer = s_layer_base_init(layer, self, SLT_COMPONENTS, ix, w, h, d);
		lu_user_assert_void(layer, "Cannot init component layer");
		self->cells_3_size += s_layer_neus_size(layer);

		++ix;
		d = 1;

		// Cells 
		layer 	= &self->data_layers[ix];

		layer = s_layer_base_init(layer, self, SLT_PIXELS, ix, w, h, d);
		lu_user_assert_void(layer, "Cannot init cell layer");
		self->cells_2_size += s_layer_neus_size(layer);

		// Datum
		--w;
		--h;
		++ix;

		while (w > 0 && h > 0)
		{
			lu_user_assert_void(ix < self->data_layers_size, "Index error");

			layer = &self->data_layers[ix];

			layer = s_layer_base_init(layer, self, SLT_PYRAS, ix, w, h, d);
			lu_user_assert_void(layer, "Cannot init pyra layer");
			self->cells_2_size += s_layer_neus_size(layer);

			if (w > 0) --w;
			if (h > 0) --h;
			++ix; 
		}

		// Blocks
		ix = 0;
		w = self->block_layers_size;
		h = 1;
		d = 1;

		while(w > 0)
		{
			lu_user_assert_void(ix < self->block_layers_size, "Wrong layer index");

			layer = &self->block_layers[ix];

			layer = s_layer_base_init(layer, self, SLT_BLOCKS, ix, 1, h, d);
			lu_user_assert_void(layer, "Cannot init layer");
			self->cells_size += s_layer_neus_size(layer);

			++ix;
			--w;
		}
	}

	static void s_rec_layers_deinit(S_Rec self)
	{
		lu_user_assert_void(self, "S_Rec is NULL");

		S_Layer layer;
		for (lu_size i = 0; i < self->data_layers_size; i++)
		{
			layer 	= &self->data_layers[i];
			s_layer_base_deinit(layer);
		}

		for (lu_size i = 0; i < self->block_layers_size; i++)
		{
			layer = &self->block_layers[i];
			s_layer_base_deinit(layer);
		}
	}

	static void s_rec_components_init(S_Rec self)
	{
		lu_user_assert_void(self, "S_Rec is NULL");
		lu_user_assert_void(self->data_layers, "self->data_layers is NULL");

		lu_size w = self->cells_w;
		lu_size h = self->cells_h;
		lu_size d = self->cells_d;

		S_Layer layer 	= &self->data_layers[0];

		lu_size z;
		lu_size y;
		lu_size x;

		S_Cell_3 neu = NULL;

		for (z = 0; z < d; z++)
			for (y = 0; y < h; y++)
				for (x = 0; x < w; x++)
				{
					neu = s_rec_cell_3_assign(self, layer, x, y, z); 
					lu_user_assert_void(neu, "Cannot init neu");

					neu = (S_Cell_3) s_component_links_alloc((S_Cell) neu, self); 
					lu_user_assert_void(neu, "Cannot component init neu");
				}
	}

	static void s_rec_components_deinit(S_Rec self)
	{
		lu_user_assert_void(self, "S_Rec is NULL");
	}

	static void s_rec_pixels_init(S_Rec self)
	{
		lu_user_assert_void(self, "S_Rec is NULL");
		lu_user_assert_void(self->data_layers, "self->data_layers is NULL");

		S_Layer layer 		= &self->data_layers[1];
		S_Layer b_layer 	= &self->data_layers[0];

		s_layer_pixel_cells_init(layer, b_layer);
	}

	static void s_rec_pixels_deinit(S_Rec self)
	{
		lu_user_assert_void(self, "S_Rec is NULL");
	
		S_Layer	layer = &self->data_layers[1];

		S_Cell neu = NULL;
		for (lu_size j = 0; j < layer->cells_size; j++)
		{
			neu = layer->cells[j];
			if (neu)
			{
				s_cell_links_free(neu);
				s_rect_cell_2_retract((S_Cell_2) neu);
			}
		}
	}

	static void s_rec_pyras_init(S_Rec self)
	{
		lu_user_assert_void(self, "S_Rec is NULL");

		S_Layer layer;
		S_Layer b_layer = NULL;

		for(lu_size ix = 2; ix < self->data_layers_size; ix++)
		{
			layer 		= &self->data_layers[ix];
			b_layer 	= &self->data_layers[ix - 1];

			s_layer_pyra_cells_init(layer, b_layer);
		}
	}

	static void s_rec_pyras_deinit(S_Rec self)
	{
		lu_user_assert_void(self, "S_Rec is NULL");

		for(lu_size i = 0; i < self->data_layers_size; i++)
		{
			s_layer_pyra_cells_deinit(&self->data_layers[i]);
		}
	}

	static void s_rec_blocks_init(S_Rec self)
	{
		lu_user_assert_void(self, "S_Rec is NULL");

		S_Layer layer;
		S_Layer b_layer = NULL;
		lu_size ix;

		for(ix = 0; ix < self->block_layers_size; ix++)
		{
			layer = &self->block_layers[ix];

			if (ix > 0)
			{
				b_layer = &self->block_layers[ix - 1];
			}
			else
			{
				// last layer from data layers
				b_layer = &self->data_layers[self->data_layers_size - 1];
			}

			s_layer_block_cells_init(layer, b_layer);
		}
	}

	static void s_rec_blocks_deinit(S_Rec self)
	{
		lu_user_assert_void(self, "S_Rec is NULL");

		for(lu_size i = 0; i < self->block_layers_size; i++)
		{
			s_layer_block_cells_deinit(&self->block_layers[i]);
		}
	}