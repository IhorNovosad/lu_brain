/**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
// Create and destroy

	static S_Layer s_layer_base_init
	( 
		S_Layer self, 
		S_Rec rec, 
		enum s_layer_type type, 
		lu_size l, 
		lu_size w, 
		lu_size h, 
		lu_size d
	)
	{
		lu_user_assert(self, "S_Layer is NULL");
		lu_user_assert(rec, "Rec is NULL");
		lu_user_assert(w > 0, "Width should be greater than 0"); 
		lu_user_assert(h > 0, "Height should be greater than 0");
		lu_user_assert(d > 0, "Depth should be greater than 0");

		self->rec 		= rec;
		self->type 		= type;
		self->l 		= l;
		self->w 		= w;
		self->h 		= h;
		self->d 		= d;

		self->cells = (S_Cell*) mem_temp_alloc(sizeof(S_Cell) * self->w * self->h * self->d);
		lu_user_assert(self->cells, "Cannot allocate S_Layer cells");

		return self;
	} 

	static void s_layer_base_deinit(S_Layer self)
	{
		lu_user_assert_void(self, "S_Layer is NULL");
		if (self->cells)
		{
			mem_temp_free((lu_p_byte) self->cells);
			self->cells = NULL;
		}
	}

	static void s_layer_component_cells_init(S_Layer self, S_Layer b_layer)
	{
		lu_user_assert_void(self, "S_Layer is NULL");
	}

	static void s_layer_component_cells_deinit(S_Layer self)
	{
		lu_user_assert_void(self, "S_Layer is NULL");
	}

	static void (S_Layer self, S_Layer b_layer)
	{
		lu_user_assert_void(self, "S_Layer is NULL");

		lu_size w = self->w;
		lu_size h = self->h;

		lu_size y;
		lu_size x;

		S_Cell_2 neu = NULL;

		for (y = 0; y < h; y++)
			for (x = 0; x < w; x++)
			{
				neu = s_rec_cell_2_assign(self->rec, self, x, y); 
				lu_user_assert_void(neu, "Cannot init neu");

				neu = (S_Cell_2) s_pixel_links_alloc((S_Cell) neu, self); 
				lu_user_assert_void(neu, "Cannot component init neu");

				s_pixel_connect(neu, b_layer);
			}

	}

	static void s_layer_pixel_cells_deinit(S_Layer self)
	{
		lu_user_assert_void(self, "S_Layer is NULL");
	}

	static void s_layer_pyra_cells_init(S_Layer self, S_Layer b_layer)
	{
		lu_size w 			= self->w;
		lu_size h 			= self->h; 
 
 		S_Cell_2 neu = NULL;
 		lu_size x;
		for (lu_size y = 0; y < h; y++)
			for (x = 0; x < w; x++)
			{
				neu = s_rec_cell_2_assign(self->rec, self, x, y); 
				lu_user_assert_void(neu, "Cannot init neu");

				neu = (S_Cell_2) s_pyra_links_alloc((S_Cell) neu, self->rec); 
				lu_user_assert_void(neu, "Cannot pyra init neu");

				if (b_layer)
					s_pyra_connect(neu, b_layer);
			}
	}

	static void s_layer_pyra_cells_deinit(S_Layer self)
	{
		lu_user_assert_void(self, "S_Layer is NULL");

		S_Cell neu = NULL;
		for (lu_size j = 0; j < self->cells_size; j++)
		{
			neu = self->cells[j];
			if (neu)
			{
				s_cell_links_free(neu);
				s_rec_cell_2_retract(self->rec, (S_Cell_2) neu);
			}
		}
	}

	static void s_layer_block_cells_init(S_Layer self, S_Layer b_layer)
	{
		lu_user_assert_void(self, "S_Layer is NULL");

		lu_size w 	= self->w;
		S_Cell neu 	= NULL;

		//lu_debug("\nw=%d, h=%d, d=%d", w, layer->h, layer->d);
		for (lu_size x = 0; x < w; x++)
		{
			neu = s_rec_cell_assign(self->rec, self); 
			lu_user_assert_void(neu, "Cannot init neu");

			neu = s_block_links_alloc((S_Cell) neu, self->rec); 
			lu_user_assert_void(neu, "Cannot alloc block links");

			if (b_layer)
			{
				s_block_connect(neu, b_layer);
			}
		}
	}

	static void s_layer_block_cells_deinit(S_Layer self)
	{ 
		lu_user_assert_void(self, "S_Layer is NULL");

		S_Cell neu = NULL;
		for (lu_size j = 0; j < layer->cells_size; j++)
		{
			neu = layer->cells[j];
			if (neu)
			{
				s_cell_links_free(neu);
				s_rec_cell_retract(self->rec, neu);
			}
		}
	}


	static void s_layer_print_info(S_Layer self)
	{
		lu_user_assert_void(self, "S_Layer is NULL");

		switch(self->type)
		{
			case SLT_COMPONENTS:
				lu_debug("\n 	 	%-15s", "Comps Layer, ");
				break;
			case SLT_PIXELS:
				lu_debug("\n 	 	%-15s", "Pixels Layer, ");
				break;
			case SLT_PYRAS:
				lu_debug("\n 	 	%-15s", "Pyras Layer, ");
				break;
			case SLT_BLOCKS:
				lu_debug("\n 	 	%-15s", "Blocks Layer, ");
				break;
			default:
				lu_debug("\n 	 	%-15s", "UNKNOWN Layer, ");
		}

		lu_debug("l: %3lu, w: %3lu, h: %3lu, d: %3lu, cells_count: %3lu", self->l, self->w, self->h, self->d, self->cells_count);
	}