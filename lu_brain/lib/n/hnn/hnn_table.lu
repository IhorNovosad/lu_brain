/**
	Copyright Â© 2021 Oleh Ihorovych Novosad 
*/

///////////////////////////////////////////////////////////////////////////////
//  

	static Hnn_Table hnn_table_create(Mem mem, lu_size size_in_cells)
	{
		lu_assert(mem);

		if (size_in_cells == 0)
			return NULL;

		Hnn_Table self = (Hnn_Table) mem_alloc(mem, sizeof(struct hnn_table));
		lu_assert(self);

		self->mem = mem;
		self->size_in_cells = size_in_cells;
		
		lu_size bytes_size = sizeof(Hnn_Table_Unit) * self->size_in_cells;
		
		self->units = (Hnn_Table_Unit*) mem_alloc(mem, bytes_size);

		memset(self->units, 0, bytes_size);

		lu_assert(self->units);

		return self;
	}

	static void hnn_table_destroy(Hnn_Table self)
	{
		lu_assert(self);

		Mem mem = self->mem;

		Hnn_Table_Unit unit = NULL;
		Hnn_Table_Unit next = NULL;

		if (self->units) {
			
			for (lu_size i = 0; i < self->size_in_cells; i++)
			{
				unit = self->units[i];

				if (unit == NULL) continue;
				
				while (unit)
				{
					next = unit->next;

					mem_free(mem, (lu_p_byte) unit);

					unit = next;
				}
			}
			
			mem_free(mem, (lu_p_byte) self->units);
		}

		self->size_in_cells = 0;
		self->units = NULL;
		self->mem = NULL;
		mem_free(mem, (lu_p_byte) self);
	}

///////////////////////////////////////////////////////////////////////////////
//  

	static Hnn_Table_Unit hnn_table_get_1(Hnn_Table self, lu_size sh_1)
	{

	}

	static Hnn_Table_Unit hnn_table_get_2(Hnn_Table self, lu_size shift_1, lu_size shift_2)
	{

	}

	static Hnn_Table_Unit hnn_table_get_3(Hnn_Table self, lu_size sh_1, lu_size sh_2, lu_size sh_3)
	{

	}

	static Hnn_Table_Unit hnn_table_get_4(Hnn_Table self, lu_size sh_1, lu_size sh_2, lu_size sh_3, lu_size sh_4)
	{

	}

