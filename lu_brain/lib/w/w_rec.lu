/**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/
 
///////////////////////////////////////////////////////////////////////////////
//

	static W_Rec w_rec_create(W_Mem w_mem, S_Rec s_rec)
	{
		lu_user_assert(w_mem, "W_Mem is NULL");
		lu_user_assert(s_rec, "S_Rec is NULL");
		lu_user_assert(s_rec->rec, "Lu_Rec is NULL");

		W_Rec self 		= (W_Rec) mem_temp_alloc(sizeof(struct w_rec));
		lu_user_assert(self, "Cannot allocate W_Rec");
		 
		self->w_mem 		= w_mem;
		self->s_rec 		= s_rec;
		self->config 		= s_rec->rec->config;		// pochatkovi znachennia

		lu_user_assert(s_rec->data_layers, "S_Rec data_layers is NULL");

		w_layer_2_init(&self->layer_0, self);
		w_layer_init(&self->layer_1, self);
		w_layer_init(&self->layer_2, self);

		return self;
	}

	static void w_rec_destroy(W_Rec self)
	{
		lu_assert(self);

		w_layer_deinit(&self->layer_2);
		w_layer_deinit(&self->layer_1);
		w_layer_2_deinit(&self->layer_0);

		mem_temp_free((lu_p_byte) self);
	}

	static void w_rec_data_save(W_Rec self, Lu_Data data, lu_size block_i)
	{
		lu_user_assert_void(self, "W_Rec is NULL");
		lu_user_assert_void(data, "Lu_Data is NULL");

		switch (self->config.transf_algorithm)
		{
			case LU_TA_NONE:
				
				break;
			case LU_TA_STATIC_IMAGE:
				w_rec_ta_static_image(self, data);
				break;
			default:
				lu_user_assert_void(self, "Unknown transformation algorithm (transf_algorithm)! ");
				break;
		}
		
	}