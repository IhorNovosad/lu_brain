/**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/
 
///////////////////////////////////////////////////////////////////////////////
//

	static void w_layer_2_datum_node_before_destroy(Lu_Lim_List lim_list, Lu_L_Node node)
	{
		lu_assert(node);

		Lu_Data data = (Lu_Data) lu_l_node_value(node);
		lu_assert(data);

		lu_data_destroy(data, g_mem_temp);

		lu_l_node_value_set(node, NULL);
	}

	static W_Layer_2 w_layer_2_init(W_Layer_2 self, W_Rec w_rec)
	{
		lu_assert(self);
		lu_assert(w_rec);

 		w_layer_init(&self->super, w_rec);

		self->w 				= w_rec->config.width;
		self->h					= w_rec->config.height;
		self->d 				= w_rec->config.depth; 

		self->datum 			= lu_lim_list_create(g_mem_temp, w_rec->config.hold_blocks_size); 
		lu_user_assert(self->datum, "Cannot allocate Lu_Lim_List");

		self->datum->node_before_destroy = w_layer_2_datum_node_before_destroy;

		self->datum_lost_count	= 0;

		return self;
	}

	static void w_layer_2_deinit(W_Layer_2 self)
	{
		lu_assert(self);

		lu_lim_list_destroy(self->datum);
		w_layer_deinit(&self->super);
	}

	static void w_layer_2_hold(W_Layer_2 self, Lu_Data data)
	{
		lu_assert(self);
		lu_assert(data);

		// if we cannot hold anymore we dispose oldest data (FIFO)
		if (lu_lim_list_count(self->datum) >= lu_lim_list_size(self->datum))
			++self->datum_lost_count;

		Lu_Data dest = lu_data_create(g_mem_temp);

		lu_data_deep_copy(dest, data);

		lu_lim_list_append(self->datum, (lu_p_void) data);
	}