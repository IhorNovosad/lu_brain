/**
	Copyright Â© 2020 Oleh Ihorovych Novosad 
*/
 
///////////////////////////////////////////////////////////////////////////////
//

	static W_Layer_2 w_layer_2_init(W_Layer_2 self, W_Rec w_rec)
	{
		lu_assert(self);
		lu_assert(w_rec);

 		w_layer_init(&self->super, w_rec);

		self->w 				= w_rec->config.width;
		self->h					= w_rec->config.height;
		self->d 				= w_rec->config.depth;
		self->hold_blocks_size 	= w_rec->config.hold_blocks_size;
		self->datum 			= lu_list_create(g_mem_temp); 
		self->data_lost_count	= 0;

		return self;
	}

	void w_layer_2_destroy_data(Lu_List datum, lu_p_void value, lu_p_void p1)
	{
		lu_assert(value);
		lu_data_destroy((Lu_Data) value, g_mem_temp);
	}

	static void w_layer_2_deinit(W_Layer_2 self)
	{
		lu_assert(self);

		lu_list_each_1p(self->datum, w_layer_2_destroy_data, NULL);
		lu_list_destroy(self->datum);

		w_layer_deinit(&self->super);
	}

	static void w_layer_2_hold(W_Layer_2 self, Lu_Data data)
	{
		lu_assert(self);
		lu_assert(data);

		// if we cannot hold anymore dispose oldest data (FIFO)
		if (lu_list_count(self->datum) > self->hold_blocks_size && !lu_list_is_empty(self->datum))
		{
			// WARNING: data is getting lost here

			// Lu_Date date = lu_list_node_first(self->datum);
			// lu_list_node_remove_first(self->datum);

			++self->data_lost_count;
		}

		// lu_user_assert_void(self->datum_count < self->datum_size, "W_Layer_2 cannot hold more data."); 

		// Lu_Data dest = &self->datum[self->datum_count];
		// ++self->datum_count;

		// lu_data_deep_copy(dest, data);
	}